
STM32_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000457c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800471c  0800471c  0001471c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004780  08004780  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004780  08004780  00014780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004788  08004788  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004788  08004788  00014788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800478c  0800478c  0001478c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000070  08004800  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08004800  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b45  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f8  00000000  00000000  00029be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0002b4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  0002bcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cbd  00000000  00000000  0002c428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a073  00000000  00000000  000430e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091bb9  00000000  00000000  0004d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ded11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024c4  00000000  00000000  000ded64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004704 	.word	0x08004704

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004704 	.word	0x08004704

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b974 	b.w	8000dcc <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	468e      	mov	lr, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14d      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4694      	mov	ip, r2
 8000b0e:	d969      	bls.n	8000be4 <__udivmoddi4+0xe8>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b152      	cbz	r2, 8000b2c <__udivmoddi4+0x30>
 8000b16:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1a:	f1c2 0120 	rsb	r1, r2, #32
 8000b1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b26:	ea41 0e03 	orr.w	lr, r1, r3
 8000b2a:	4094      	lsls	r4, r2
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	0c21      	lsrs	r1, r4, #16
 8000b32:	fbbe f6f8 	udiv	r6, lr, r8
 8000b36:	fa1f f78c 	uxth.w	r7, ip
 8000b3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b42:	fb06 f107 	mul.w	r1, r6, r7
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b52:	f080 811f 	bcs.w	8000d94 <__udivmoddi4+0x298>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 811c 	bls.w	8000d94 <__udivmoddi4+0x298>
 8000b5c:	3e02      	subs	r6, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a5b      	subs	r3, r3, r1
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b68:	fb08 3310 	mls	r3, r8, r0, r3
 8000b6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b70:	fb00 f707 	mul.w	r7, r0, r7
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x92>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b80:	f080 810a 	bcs.w	8000d98 <__udivmoddi4+0x29c>
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	f240 8107 	bls.w	8000d98 <__udivmoddi4+0x29c>
 8000b8a:	4464      	add	r4, ip
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	1be4      	subs	r4, r4, r7
 8000b94:	2600      	movs	r6, #0
 8000b96:	b11d      	cbz	r5, 8000ba0 <__udivmoddi4+0xa4>
 8000b98:	40d4      	lsrs	r4, r2
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ba0:	4631      	mov	r1, r6
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d909      	bls.n	8000bbe <__udivmoddi4+0xc2>
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	f000 80ef 	beq.w	8000d8e <__udivmoddi4+0x292>
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb6:	4630      	mov	r0, r6
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	fab3 f683 	clz	r6, r3
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d14a      	bne.n	8000c5c <__udivmoddi4+0x160>
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d302      	bcc.n	8000bd0 <__udivmoddi4+0xd4>
 8000bca:	4282      	cmp	r2, r0
 8000bcc:	f200 80f9 	bhi.w	8000dc2 <__udivmoddi4+0x2c6>
 8000bd0:	1a84      	subs	r4, r0, r2
 8000bd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	469e      	mov	lr, r3
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	d0e0      	beq.n	8000ba0 <__udivmoddi4+0xa4>
 8000bde:	e9c5 4e00 	strd	r4, lr, [r5]
 8000be2:	e7dd      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000be4:	b902      	cbnz	r2, 8000be8 <__udivmoddi4+0xec>
 8000be6:	deff      	udf	#255	; 0xff
 8000be8:	fab2 f282 	clz	r2, r2
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	f040 8092 	bne.w	8000d16 <__udivmoddi4+0x21a>
 8000bf2:	eba1 010c 	sub.w	r1, r1, ip
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f fe8c 	uxth.w	lr, ip
 8000bfe:	2601      	movs	r6, #1
 8000c00:	0c20      	lsrs	r0, r4, #16
 8000c02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c06:	fb07 1113 	mls	r1, r7, r3, r1
 8000c0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c0e:	fb0e f003 	mul.w	r0, lr, r3
 8000c12:	4288      	cmp	r0, r1
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x12c>
 8000c16:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x12a>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f200 80cb 	bhi.w	8000dbc <__udivmoddi4+0x2c0>
 8000c26:	4643      	mov	r3, r8
 8000c28:	1a09      	subs	r1, r1, r0
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c30:	fb07 1110 	mls	r1, r7, r0, r1
 8000c34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c38:	fb0e fe00 	mul.w	lr, lr, r0
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x156>
 8000c40:	eb1c 0404 	adds.w	r4, ip, r4
 8000c44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x154>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f200 80bb 	bhi.w	8000dc6 <__udivmoddi4+0x2ca>
 8000c50:	4608      	mov	r0, r1
 8000c52:	eba4 040e 	sub.w	r4, r4, lr
 8000c56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c5a:	e79c      	b.n	8000b96 <__udivmoddi4+0x9a>
 8000c5c:	f1c6 0720 	rsb	r7, r6, #32
 8000c60:	40b3      	lsls	r3, r6
 8000c62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c72:	431c      	orrs	r4, r3
 8000c74:	40f9      	lsrs	r1, r7
 8000c76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c82:	0c20      	lsrs	r0, r4, #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fb09 1118 	mls	r1, r9, r8, r1
 8000c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c90:	fb08 f00e 	mul.w	r0, r8, lr
 8000c94:	4288      	cmp	r0, r1
 8000c96:	fa02 f206 	lsl.w	r2, r2, r6
 8000c9a:	d90b      	bls.n	8000cb4 <__udivmoddi4+0x1b8>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ca4:	f080 8088 	bcs.w	8000db8 <__udivmoddi4+0x2bc>
 8000ca8:	4288      	cmp	r0, r1
 8000caa:	f240 8085 	bls.w	8000db8 <__udivmoddi4+0x2bc>
 8000cae:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc8:	458e      	cmp	lr, r1
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x1e2>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd4:	d26c      	bcs.n	8000db0 <__udivmoddi4+0x2b4>
 8000cd6:	458e      	cmp	lr, r1
 8000cd8:	d96a      	bls.n	8000db0 <__udivmoddi4+0x2b4>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	4461      	add	r1, ip
 8000cde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ce2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ce6:	eba1 010e 	sub.w	r1, r1, lr
 8000cea:	42a1      	cmp	r1, r4
 8000cec:	46c8      	mov	r8, r9
 8000cee:	46a6      	mov	lr, r4
 8000cf0:	d356      	bcc.n	8000da0 <__udivmoddi4+0x2a4>
 8000cf2:	d053      	beq.n	8000d9c <__udivmoddi4+0x2a0>
 8000cf4:	b15d      	cbz	r5, 8000d0e <__udivmoddi4+0x212>
 8000cf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000d02:	fa22 f306 	lsr.w	r3, r2, r6
 8000d06:	40f1      	lsrs	r1, r6
 8000d08:	431f      	orrs	r7, r3
 8000d0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d0e:	2600      	movs	r6, #0
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	f1c2 0320 	rsb	r3, r2, #32
 8000d1a:	40d8      	lsrs	r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	fa21 f303 	lsr.w	r3, r1, r3
 8000d24:	4091      	lsls	r1, r2
 8000d26:	4301      	orrs	r1, r0
 8000d28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d34:	fb07 3610 	mls	r6, r7, r0, r3
 8000d38:	0c0b      	lsrs	r3, r1, #16
 8000d3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d42:	429e      	cmp	r6, r3
 8000d44:	fa04 f402 	lsl.w	r4, r4, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x260>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d52:	d22f      	bcs.n	8000db4 <__udivmoddi4+0x2b8>
 8000d54:	429e      	cmp	r6, r3
 8000d56:	d92d      	bls.n	8000db4 <__udivmoddi4+0x2b8>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	b289      	uxth	r1, r1
 8000d60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d64:	fb07 3316 	mls	r3, r7, r6, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x28a>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d7c:	d216      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d914      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d82:	3e02      	subs	r6, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	1ac9      	subs	r1, r1, r3
 8000d88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d8c:	e738      	b.n	8000c00 <__udivmoddi4+0x104>
 8000d8e:	462e      	mov	r6, r5
 8000d90:	4628      	mov	r0, r5
 8000d92:	e705      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000d94:	4606      	mov	r6, r0
 8000d96:	e6e3      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d98:	4618      	mov	r0, r3
 8000d9a:	e6f8      	b.n	8000b8e <__udivmoddi4+0x92>
 8000d9c:	454b      	cmp	r3, r9
 8000d9e:	d2a9      	bcs.n	8000cf4 <__udivmoddi4+0x1f8>
 8000da0:	ebb9 0802 	subs.w	r8, r9, r2
 8000da4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da8:	3801      	subs	r0, #1
 8000daa:	e7a3      	b.n	8000cf4 <__udivmoddi4+0x1f8>
 8000dac:	4646      	mov	r6, r8
 8000dae:	e7ea      	b.n	8000d86 <__udivmoddi4+0x28a>
 8000db0:	4620      	mov	r0, r4
 8000db2:	e794      	b.n	8000cde <__udivmoddi4+0x1e2>
 8000db4:	4640      	mov	r0, r8
 8000db6:	e7d1      	b.n	8000d5c <__udivmoddi4+0x260>
 8000db8:	46d0      	mov	r8, sl
 8000dba:	e77b      	b.n	8000cb4 <__udivmoddi4+0x1b8>
 8000dbc:	3b02      	subs	r3, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	e732      	b.n	8000c28 <__udivmoddi4+0x12c>
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	e709      	b.n	8000bda <__udivmoddi4+0xde>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e742      	b.n	8000c52 <__udivmoddi4+0x156>

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <current_sensor.0>:
  /* USER CODE BEGIN 2 */
  /******************************************/
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *) adcValArray,3);      //to start the ADC conversion process
/*********************************/
 int  current_sensor (uint16_t read_digital_current)
 {
 8000dd0:	b5b0      	push	{r4, r5, r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
 8000dda:	f8c7 c000 	str.w	ip, [r7]
	 float current_sensor_error;
	 float current_sens_sensitivity = 0.066;
 8000dde:	4b3e      	ldr	r3, [pc, #248]	; (8000ed8 <current_sensor.0+0x108>)
 8000de0:	617b      	str	r3, [r7, #20]
	 output_voltage = (float) read_digital_current*3.3*2/ 4095;
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	ee07 3a90 	vmov	s15, r3
 8000de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dec:	ee17 0a90 	vmov	r0, s15
 8000df0:	f7ff fbb2 	bl	8000558 <__aeabi_f2d>
 8000df4:	a332      	add	r3, pc, #200	; (adr r3, 8000ec0 <current_sensor.0+0xf0>)
 8000df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfa:	f7ff fc05 	bl	8000608 <__aeabi_dmul>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	4610      	mov	r0, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	f7ff fa47 	bl	800029c <__adddf3>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	460b      	mov	r3, r1
 8000e12:	4610      	mov	r0, r2
 8000e14:	4619      	mov	r1, r3
 8000e16:	a32c      	add	r3, pc, #176	; (adr r3, 8000ec8 <current_sensor.0+0xf8>)
 8000e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1c:	f7ff fd1e 	bl	800085c <__aeabi_ddiv>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4610      	mov	r0, r2
 8000e26:	4619      	mov	r1, r3
 8000e28:	f7ff fe00 	bl	8000a2c <__aeabi_d2f>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	4a2b      	ldr	r2, [pc, #172]	; (8000edc <current_sensor.0+0x10c>)
 8000e30:	6013      	str	r3, [r2, #0]
	 }
	 else if (internal_temp_sensor >= 25 && internal_temp_sensor < 85){
		 current_sensor_error = 0.01 *internal_temp_sensor + 0.05;
	 }*/

	 float true_output_voltage= output_voltage * (1-0.2);    //0.2 is the current_sensor_error.
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <current_sensor.0+0x10c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fb8e 	bl	8000558 <__aeabi_f2d>
 8000e3c:	a324      	add	r3, pc, #144	; (adr r3, 8000ed0 <current_sensor.0+0x100>)
 8000e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e42:	f7ff fbe1 	bl	8000608 <__aeabi_dmul>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f7ff fded 	bl	8000a2c <__aeabi_d2f>
 8000e52:	4603      	mov	r3, r0
 8000e54:	613b      	str	r3, [r7, #16]
	 current =(true_output_voltage - 2.5)/current_sens_sensitivity ;  // from the data sheet of current sensor in case of Ip=30, the sensitivity = 66 mV/A.
 8000e56:	6938      	ldr	r0, [r7, #16]
 8000e58:	f7ff fb7e 	bl	8000558 <__aeabi_f2d>
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <current_sensor.0+0x110>)
 8000e62:	f7ff fa19 	bl	8000298 <__aeabi_dsub>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4614      	mov	r4, r2
 8000e6c:	461d      	mov	r5, r3
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f7ff fb72 	bl	8000558 <__aeabi_f2d>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	4620      	mov	r0, r4
 8000e7a:	4629      	mov	r1, r5
 8000e7c:	f7ff fcee 	bl	800085c <__aeabi_ddiv>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f7ff fdd0 	bl	8000a2c <__aeabi_d2f>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <current_sensor.0+0x114>)
 8000e90:	6013      	str	r3, [r2, #0]

	 int current_to_send = (int) (1000*current)/20;  // (20)only to calibrate the value (it should be changed)
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <current_sensor.0+0x114>)
 8000e94:	edd3 7a00 	vldr	s15, [r3]
 8000e98:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000ee8 <current_sensor.0+0x118>
 8000e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ea4:	ee17 1a90 	vmov	r1, s15
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <current_sensor.0+0x11c>)
 8000eaa:	fb83 2301 	smull	r2, r3, r3, r1
 8000eae:	10da      	asrs	r2, r3, #3
 8000eb0:	17cb      	asrs	r3, r1, #31
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	60fb      	str	r3, [r7, #12]


     return current_to_send;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
  }
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8000ec0:	66666666 	.word	0x66666666
 8000ec4:	400a6666 	.word	0x400a6666
 8000ec8:	00000000 	.word	0x00000000
 8000ecc:	40affe00 	.word	0x40affe00
 8000ed0:	9999999a 	.word	0x9999999a
 8000ed4:	3fe99999 	.word	0x3fe99999
 8000ed8:	3d872b02 	.word	0x3d872b02
 8000edc:	200001e4 	.word	0x200001e4
 8000ee0:	40040000 	.word	0x40040000
 8000ee4:	200001e8 	.word	0x200001e8
 8000ee8:	447a0000 	.word	0x447a0000
 8000eec:	66666667 	.word	0x66666667

08000ef0 <main>:
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
int main(void)
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	603b      	str	r3, [r7, #0]
  HAL_Init();
 8000efc:	f000 fcaa 	bl	8001854 <HAL_Init>
  SystemClock_Config();
 8000f00:	f000 f964 	bl	80011cc <SystemClock_Config>
  MX_GPIO_Init();
 8000f04:	f000 fa84 	bl	8001410 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f08:	f000 fa5a 	bl	80013c0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f0c:	f000 f9be 	bl	800128c <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8000f10:	f000 fa2c 	bl	800136c <MX_USART6_UART_Init>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *) adcValArray,3);      //to start the ADC conversion process
 8000f14:	2203      	movs	r2, #3
 8000f16:	494c      	ldr	r1, [pc, #304]	; (8001048 <main+0x158>)
 8000f18:	484c      	ldr	r0, [pc, #304]	; (800104c <main+0x15c>)
 8000f1a:	f000 fd75 	bl	8001a08 <HAL_ADC_Start_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /*************************************************************************************/
	  digital_read_internal_temp_sensor = adcValArray [2];                 //read the internal temperature sensor to adjust the output voltage of the current sensor
 8000f1e:	4b4a      	ldr	r3, [pc, #296]	; (8001048 <main+0x158>)
 8000f20:	889a      	ldrh	r2, [r3, #4]
 8000f22:	4b4b      	ldr	r3, [pc, #300]	; (8001050 <main+0x160>)
 8000f24:	801a      	strh	r2, [r3, #0]
	  float Vout_internal_temp_sensor = (float) digital_read_internal_temp_sensor*3.3/4095;
 8000f26:	4b4a      	ldr	r3, [pc, #296]	; (8001050 <main+0x160>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	ee07 3a90 	vmov	s15, r3
 8000f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f32:	ee17 0a90 	vmov	r0, s15
 8000f36:	f7ff fb0f 	bl	8000558 <__aeabi_f2d>
 8000f3a:	a33b      	add	r3, pc, #236	; (adr r3, 8001028 <main+0x138>)
 8000f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f40:	f7ff fb62 	bl	8000608 <__aeabi_dmul>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	a338      	add	r3, pc, #224	; (adr r3, 8001030 <main+0x140>)
 8000f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f52:	f7ff fc83 	bl	800085c <__aeabi_ddiv>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f7ff fd65 	bl	8000a2c <__aeabi_d2f>
 8000f62:	4603      	mov	r3, r0
 8000f64:	607b      	str	r3, [r7, #4]
	  internal_temp_sensor = (Vout_internal_temp_sensor - 0.76) / 0.0025 + 25;
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff faf6 	bl	8000558 <__aeabi_f2d>
 8000f6c:	a332      	add	r3, pc, #200	; (adr r3, 8001038 <main+0x148>)
 8000f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f72:	f7ff f991 	bl	8000298 <__aeabi_dsub>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	a330      	add	r3, pc, #192	; (adr r3, 8001040 <main+0x150>)
 8000f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f84:	f7ff fc6a 	bl	800085c <__aeabi_ddiv>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <main+0x164>)
 8000f96:	f7ff f981 	bl	800029c <__adddf3>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f7ff fd43 	bl	8000a2c <__aeabi_d2f>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4a2b      	ldr	r2, [pc, #172]	; (8001058 <main+0x168>)
 8000faa:	6013      	str	r3, [r2, #0]
	  /***********************************************************************************************/
	  if (flag == false){
 8000fac:	4b2b      	ldr	r3, [pc, #172]	; (800105c <main+0x16c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	f083 0301 	eor.w	r3, r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d006      	beq.n	8000fc8 <main+0xd8>
	  		  HAL_Delay(5000);                       // wait for 5 seconds to let the ADC get the true right value
 8000fba:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fbe:	f000 fcbb 	bl	8001938 <HAL_Delay>
	  		  flag= true;
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <main+0x16c>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
	  	  }

	  current_sensor1 = current_sensor (adcValArray [0]);
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <main+0x158>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	463a      	mov	r2, r7
 8000fce:	4694      	mov	ip, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fefd 	bl	8000dd0 <current_sensor.0>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a21      	ldr	r2, [pc, #132]	; (8001060 <main+0x170>)
 8000fda:	6013      	str	r3, [r2, #0]
	  voltage_sensor1 = voltage_sensor (adcValArray [1]);
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <main+0x158>)
 8000fde:	885b      	ldrh	r3, [r3, #2]
 8000fe0:	463a      	mov	r2, r7
 8000fe2:	4694      	mov	ip, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f83f 	bl	8001068 <voltage_sensor.1>
 8000fea:	4603      	mov	r3, r0
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <main+0x174>)
 8000ff0:	801a      	strh	r2, [r3, #0]

	  uart_voltage_transmit ('a',voltage_sensor1);
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <main+0x174>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	463a      	mov	r2, r7
 8000ff8:	4694      	mov	ip, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	2061      	movs	r0, #97	; 0x61
 8000ffe:	f000 f89b 	bl	8001138 <uart_voltage_transmit.2>
	  HAL_Delay(1000);
 8001002:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001006:	f000 fc97 	bl	8001938 <HAL_Delay>

	 // uart_voltage_transmit ('b',voltage_sensor2);
	  //HAL_Delay(1000);

	  uart_current_transmit ('i',current_sensor1);
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <main+0x170>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	463a      	mov	r2, r7
 8001010:	4694      	mov	ip, r2
 8001012:	4619      	mov	r1, r3
 8001014:	2069      	movs	r0, #105	; 0x69
 8001016:	f000 f8b5 	bl	8001184 <uart_current_transmit.3>
	  HAL_Delay(1000);
 800101a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800101e:	f000 fc8b 	bl	8001938 <HAL_Delay>
  {
 8001022:	e77c      	b.n	8000f1e <main+0x2e>
 8001024:	f3af 8000 	nop.w
 8001028:	66666666 	.word	0x66666666
 800102c:	400a6666 	.word	0x400a6666
 8001030:	00000000 	.word	0x00000000
 8001034:	40affe00 	.word	0x40affe00
 8001038:	851eb852 	.word	0x851eb852
 800103c:	3fe851eb 	.word	0x3fe851eb
 8001040:	47ae147b 	.word	0x47ae147b
 8001044:	3f647ae1 	.word	0x3f647ae1
 8001048:	200001d8 	.word	0x200001d8
 800104c:	2000008c 	.word	0x2000008c
 8001050:	200001f0 	.word	0x200001f0
 8001054:	40390000 	.word	0x40390000
 8001058:	200001f4 	.word	0x200001f4
 800105c:	200001f8 	.word	0x200001f8
 8001060:	200001e0 	.word	0x200001e0
 8001064:	200001de 	.word	0x200001de

08001068 <voltage_sensor.1>:
  {
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	80fb      	strh	r3, [r7, #6]
 8001072:	f8c7 c000 	str.w	ip, [r7]
 	 float ADC_error = 0.89;
 8001076:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <voltage_sensor.1+0xc0>)
 8001078:	617b      	str	r3, [r7, #20]
 	 float voltage_sens_sensitivity = 0.2;
 800107a:	4b2c      	ldr	r3, [pc, #176]	; (800112c <voltage_sensor.1+0xc4>)
 800107c:	613b      	str	r3, [r7, #16]
 	 uint16_t true_digital_voltage = read_digital_voltage;
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	81fb      	strh	r3, [r7, #14]
 	 voltage = (float) 1000*true_digital_voltage *3.3/voltage_sens_sensitivity*ADC_error/4095;
 8001082:	89fb      	ldrh	r3, [r7, #14]
 8001084:	ee07 3a90 	vmov	s15, r3
 8001088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001130 <voltage_sensor.1+0xc8>
 8001090:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001094:	ee17 0a90 	vmov	r0, s15
 8001098:	f7ff fa5e 	bl	8000558 <__aeabi_f2d>
 800109c:	a31e      	add	r3, pc, #120	; (adr r3, 8001118 <voltage_sensor.1+0xb0>)
 800109e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a2:	f7ff fab1 	bl	8000608 <__aeabi_dmul>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4614      	mov	r4, r2
 80010ac:	461d      	mov	r5, r3
 80010ae:	6938      	ldr	r0, [r7, #16]
 80010b0:	f7ff fa52 	bl	8000558 <__aeabi_f2d>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4620      	mov	r0, r4
 80010ba:	4629      	mov	r1, r5
 80010bc:	f7ff fbce 	bl	800085c <__aeabi_ddiv>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4614      	mov	r4, r2
 80010c6:	461d      	mov	r5, r3
 80010c8:	6978      	ldr	r0, [r7, #20]
 80010ca:	f7ff fa45 	bl	8000558 <__aeabi_f2d>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4620      	mov	r0, r4
 80010d4:	4629      	mov	r1, r5
 80010d6:	f7ff fa97 	bl	8000608 <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	a30f      	add	r3, pc, #60	; (adr r3, 8001120 <voltage_sensor.1+0xb8>)
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	f7ff fbb8 	bl	800085c <__aeabi_ddiv>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f7ff fc9a 	bl	8000a2c <__aeabi_d2f>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <voltage_sensor.1+0xcc>)
 80010fc:	6013      	str	r3, [r2, #0]
 	 uint16_t voltageToSend = (uint16_t) voltage;
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <voltage_sensor.1+0xcc>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001108:	ee17 3a90 	vmov	r3, s15
 800110c:	81bb      	strh	r3, [r7, #12]
     return voltageToSend;
 800110e:	89bb      	ldrh	r3, [r7, #12]
   }
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bdb0      	pop	{r4, r5, r7, pc}
 8001118:	66666666 	.word	0x66666666
 800111c:	400a6666 	.word	0x400a6666
 8001120:	00000000 	.word	0x00000000
 8001124:	40affe00 	.word	0x40affe00
 8001128:	3f63d70a 	.word	0x3f63d70a
 800112c:	3e4ccccd 	.word	0x3e4ccccd
 8001130:	447a0000 	.word	0x447a0000
 8001134:	200001ec 	.word	0x200001ec

08001138 <uart_voltage_transmit.2>:
 {
 8001138:	b580      	push	{r7, lr}
 800113a:	b08c      	sub	sp, #48	; 0x30
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	460a      	mov	r2, r1
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	4613      	mov	r3, r2
 8001146:	80bb      	strh	r3, [r7, #4]
 8001148:	f8c7 c000 	str.w	ip, [r7]
	 sprintf(txdata, "%c%u \r\n", ID,data_to_send);
 800114c:	79fa      	ldrb	r2, [r7, #7]
 800114e:	88bb      	ldrh	r3, [r7, #4]
 8001150:	f107 000c 	add.w	r0, r7, #12
 8001154:	4909      	ldr	r1, [pc, #36]	; (800117c <uart_voltage_transmit.2+0x44>)
 8001156:	f002 fe67 	bl	8003e28 <siprintf>
	 HAL_UART_Transmit(&huart6,(uint8_t *) txdata, strlen(txdata), 10);
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f83e 	bl	80001e0 <strlen>
 8001164:	4603      	mov	r3, r0
 8001166:	b29a      	uxth	r2, r3
 8001168:	f107 010c 	add.w	r1, r7, #12
 800116c:	230a      	movs	r3, #10
 800116e:	4804      	ldr	r0, [pc, #16]	; (8001180 <uart_voltage_transmit.2+0x48>)
 8001170:	f002 fab3 	bl	80036da <HAL_UART_Transmit>
   }
 8001174:	bf00      	nop
 8001176:	3730      	adds	r7, #48	; 0x30
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	0800471c 	.word	0x0800471c
 8001180:	20000134 	.word	0x20000134

08001184 <uart_current_transmit.3>:
  {
 8001184:	b580      	push	{r7, lr}
 8001186:	b08e      	sub	sp, #56	; 0x38
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	73fb      	strb	r3, [r7, #15]
 8001190:	f8c7 c004 	str.w	ip, [r7, #4]
 	 sprintf(txdata, "%c%d \r\n", ID,data_to_send);
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	f107 0014 	add.w	r0, r7, #20
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	4909      	ldr	r1, [pc, #36]	; (80011c4 <uart_current_transmit.3+0x40>)
 800119e:	f002 fe43 	bl	8003e28 <siprintf>
 	 HAL_UART_Transmit(&huart6,(uint8_t *) txdata, strlen(txdata), 10);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f81a 	bl	80001e0 <strlen>
 80011ac:	4603      	mov	r3, r0
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	f107 0114 	add.w	r1, r7, #20
 80011b4:	230a      	movs	r3, #10
 80011b6:	4804      	ldr	r0, [pc, #16]	; (80011c8 <uart_current_transmit.3+0x44>)
 80011b8:	f002 fa8f 	bl	80036da <HAL_UART_Transmit>
    }
 80011bc:	bf00      	nop
 80011be:	3738      	adds	r7, #56	; 0x38
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	08004724 	.word	0x08004724
 80011c8:	20000134 	.word	0x20000134

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b094      	sub	sp, #80	; 0x50
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 0320 	add.w	r3, r7, #32
 80011d6:	2230      	movs	r2, #48	; 0x30
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 fe1c 	bl	8003e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	4b23      	ldr	r3, [pc, #140]	; (8001284 <SystemClock_Config+0xb8>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	4a22      	ldr	r2, [pc, #136]	; (8001284 <SystemClock_Config+0xb8>)
 80011fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001200:	4b20      	ldr	r3, [pc, #128]	; (8001284 <SystemClock_Config+0xb8>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <SystemClock_Config+0xbc>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <SystemClock_Config+0xbc>)
 8001216:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <SystemClock_Config+0xbc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001228:	2302      	movs	r3, #2
 800122a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122c:	2301      	movs	r3, #1
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001230:	2310      	movs	r3, #16
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001234:	2300      	movs	r3, #0
 8001236:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001238:	f107 0320 	add.w	r3, r7, #32
 800123c:	4618      	mov	r0, r3
 800123e:	f001 fda7 	bl	8002d90 <HAL_RCC_OscConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001248:	f000 f918 	bl	800147c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124c:	230f      	movs	r3, #15
 800124e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f002 f808 	bl	8003280 <HAL_RCC_ClockConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001276:	f000 f901 	bl	800147c <Error_Handler>
  }
}
 800127a:	bf00      	nop
 800127c:	3750      	adds	r7, #80	; 0x50
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	40007000 	.word	0x40007000

0800128c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001292:	463b      	mov	r3, r7
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800129e:	4b2f      	ldr	r3, [pc, #188]	; (800135c <MX_ADC1_Init+0xd0>)
 80012a0:	4a2f      	ldr	r2, [pc, #188]	; (8001360 <MX_ADC1_Init+0xd4>)
 80012a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80012a4:	4b2d      	ldr	r3, [pc, #180]	; (800135c <MX_ADC1_Init+0xd0>)
 80012a6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ac:	4b2b      	ldr	r3, [pc, #172]	; (800135c <MX_ADC1_Init+0xd0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012b2:	4b2a      	ldr	r3, [pc, #168]	; (800135c <MX_ADC1_Init+0xd0>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012b8:	4b28      	ldr	r3, [pc, #160]	; (800135c <MX_ADC1_Init+0xd0>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012be:	4b27      	ldr	r3, [pc, #156]	; (800135c <MX_ADC1_Init+0xd0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c6:	4b25      	ldr	r3, [pc, #148]	; (800135c <MX_ADC1_Init+0xd0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <MX_ADC1_Init+0xd0>)
 80012ce:	4a25      	ldr	r2, [pc, #148]	; (8001364 <MX_ADC1_Init+0xd8>)
 80012d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012d2:	4b22      	ldr	r3, [pc, #136]	; (800135c <MX_ADC1_Init+0xd0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80012d8:	4b20      	ldr	r3, [pc, #128]	; (800135c <MX_ADC1_Init+0xd0>)
 80012da:	2203      	movs	r2, #3
 80012dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <MX_ADC1_Init+0xd0>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_ADC1_Init+0xd0>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ec:	481b      	ldr	r0, [pc, #108]	; (800135c <MX_ADC1_Init+0xd0>)
 80012ee:	f000 fb47 	bl	8001980 <HAL_ADC_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012f8:	f000 f8c0 	bl	800147c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012fc:	2307      	movs	r3, #7
 80012fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001300:	2301      	movs	r3, #1
 8001302:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001304:	2307      	movs	r3, #7
 8001306:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	4813      	ldr	r0, [pc, #76]	; (800135c <MX_ADC1_Init+0xd0>)
 800130e:	f000 fc89 	bl	8001c24 <HAL_ADC_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001318:	f000 f8b0 	bl	800147c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800131c:	2308      	movs	r3, #8
 800131e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001320:	2302      	movs	r3, #2
 8001322:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	4619      	mov	r1, r3
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <MX_ADC1_Init+0xd0>)
 800132a:	f000 fc7b 	bl	8001c24 <HAL_ADC_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001334:	f000 f8a2 	bl	800147c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <MX_ADC1_Init+0xdc>)
 800133a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800133c:	2303      	movs	r3, #3
 800133e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_ADC1_Init+0xd0>)
 8001346:	f000 fc6d 	bl	8001c24 <HAL_ADC_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001350:	f000 f894 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2000008c 	.word	0x2000008c
 8001360:	40012000 	.word	0x40012000
 8001364:	0f000001 	.word	0x0f000001
 8001368:	10000012 	.word	0x10000012

0800136c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_USART6_UART_Init+0x4c>)
 8001372:	4a12      	ldr	r2, [pc, #72]	; (80013bc <MX_USART6_UART_Init+0x50>)
 8001374:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <MX_USART6_UART_Init+0x4c>)
 8001378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800137c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_USART6_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_USART6_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <MX_USART6_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_USART6_UART_Init+0x4c>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <MX_USART6_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_USART6_UART_Init+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_USART6_UART_Init+0x4c>)
 80013a4:	f002 f94c 	bl	8003640 <HAL_UART_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80013ae:	f000 f865 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000134 	.word	0x20000134
 80013bc:	40011400 	.word	0x40011400

080013c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <MX_DMA_Init+0x4c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a0f      	ldr	r2, [pc, #60]	; (800140c <MX_DMA_Init+0x4c>)
 80013d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <MX_DMA_Init+0x4c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	2038      	movs	r0, #56	; 0x38
 80013e8:	f000 ffa7 	bl	800233a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013ec:	2038      	movs	r0, #56	; 0x38
 80013ee:	f000 ffc0 	bl	8002372 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	2039      	movs	r0, #57	; 0x39
 80013f8:	f000 ff9f 	bl	800233a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80013fc:	2039      	movs	r0, #57	; 0x39
 80013fe:	f000 ffb8 	bl	8002372 <HAL_NVIC_EnableIRQ>

}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800

08001410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <MX_GPIO_Init+0x68>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a16      	ldr	r2, [pc, #88]	; (8001478 <MX_GPIO_Init+0x68>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <MX_GPIO_Init+0x68>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <MX_GPIO_Init+0x68>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <MX_GPIO_Init+0x68>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <MX_GPIO_Init+0x68>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_GPIO_Init+0x68>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <MX_GPIO_Init+0x68>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_GPIO_Init+0x68>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]

}
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001480:	b672      	cpsid	i
}
 8001482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001484:	e7fe      	b.n	8001484 <Error_Handler+0x8>
	...

08001488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <HAL_MspInit+0x4c>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	4a0f      	ldr	r2, [pc, #60]	; (80014d4 <HAL_MspInit+0x4c>)
 8001498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149c:	6453      	str	r3, [r2, #68]	; 0x44
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <HAL_MspInit+0x4c>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_MspInit+0x4c>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <HAL_MspInit+0x4c>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_MspInit+0x4c>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800

080014d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a3c      	ldr	r2, [pc, #240]	; (80015e8 <HAL_ADC_MspInit+0x110>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d171      	bne.n	80015de <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	4b3b      	ldr	r3, [pc, #236]	; (80015ec <HAL_ADC_MspInit+0x114>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	4a3a      	ldr	r2, [pc, #232]	; (80015ec <HAL_ADC_MspInit+0x114>)
 8001504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001508:	6453      	str	r3, [r2, #68]	; 0x44
 800150a:	4b38      	ldr	r3, [pc, #224]	; (80015ec <HAL_ADC_MspInit+0x114>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b34      	ldr	r3, [pc, #208]	; (80015ec <HAL_ADC_MspInit+0x114>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a33      	ldr	r2, [pc, #204]	; (80015ec <HAL_ADC_MspInit+0x114>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b31      	ldr	r3, [pc, #196]	; (80015ec <HAL_ADC_MspInit+0x114>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <HAL_ADC_MspInit+0x114>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a2c      	ldr	r2, [pc, #176]	; (80015ec <HAL_ADC_MspInit+0x114>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <HAL_ADC_MspInit+0x114>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = current_sensor1_Pin;
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001552:	2303      	movs	r3, #3
 8001554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(current_sensor1_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	4823      	ldr	r0, [pc, #140]	; (80015f0 <HAL_ADC_MspInit+0x118>)
 8001562:	f001 fa91 	bl	8002a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = voltage_sensor1_Pin;
 8001566:	2301      	movs	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800156a:	2303      	movs	r3, #3
 800156c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(voltage_sensor1_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	481e      	ldr	r0, [pc, #120]	; (80015f4 <HAL_ADC_MspInit+0x11c>)
 800157a:	f001 fa85 	bl	8002a88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800157e:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <HAL_ADC_MspInit+0x120>)
 8001580:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <HAL_ADC_MspInit+0x124>)
 8001582:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001584:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <HAL_ADC_MspInit+0x120>)
 8001586:	2200      	movs	r2, #0
 8001588:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800158a:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_ADC_MspInit+0x120>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_ADC_MspInit+0x120>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_ADC_MspInit+0x120>)
 8001598:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800159c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <HAL_ADC_MspInit+0x120>)
 80015a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015a6:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HAL_ADC_MspInit+0x120>)
 80015a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_ADC_MspInit+0x120>)
 80015b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_ADC_MspInit+0x120>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_ADC_MspInit+0x120>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015c2:	480d      	ldr	r0, [pc, #52]	; (80015f8 <HAL_ADC_MspInit+0x120>)
 80015c4:	f000 fef0 	bl	80023a8 <HAL_DMA_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80015ce:	f7ff ff55 	bl	800147c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_ADC_MspInit+0x120>)
 80015d6:	639a      	str	r2, [r3, #56]	; 0x38
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_ADC_MspInit+0x120>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	; 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40012000 	.word	0x40012000
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000
 80015f4:	40020400 	.word	0x40020400
 80015f8:	200000d4 	.word	0x200000d4
 80015fc:	40026410 	.word	0x40026410

08001600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a30      	ldr	r2, [pc, #192]	; (80016e0 <HAL_UART_MspInit+0xe0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d159      	bne.n	80016d6 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <HAL_UART_MspInit+0xe4>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	4a2e      	ldr	r2, [pc, #184]	; (80016e4 <HAL_UART_MspInit+0xe4>)
 800162c:	f043 0320 	orr.w	r3, r3, #32
 8001630:	6453      	str	r3, [r2, #68]	; 0x44
 8001632:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <HAL_UART_MspInit+0xe4>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f003 0320 	and.w	r3, r3, #32
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <HAL_UART_MspInit+0xe4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a27      	ldr	r2, [pc, #156]	; (80016e4 <HAL_UART_MspInit+0xe4>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <HAL_UART_MspInit+0xe4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800165a:	23c0      	movs	r3, #192	; 0xc0
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800166a:	2308      	movs	r3, #8
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	481c      	ldr	r0, [pc, #112]	; (80016e8 <HAL_UART_MspInit+0xe8>)
 8001676:	f001 fa07 	bl	8002a88 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800167a:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <HAL_UART_MspInit+0xec>)
 800167c:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <HAL_UART_MspInit+0xf0>)
 800167e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <HAL_UART_MspInit+0xec>)
 8001682:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001686:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <HAL_UART_MspInit+0xec>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_UART_MspInit+0xec>)
 8001690:	2200      	movs	r2, #0
 8001692:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_UART_MspInit+0xec>)
 8001696:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800169a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <HAL_UART_MspInit+0xec>)
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_UART_MspInit+0xec>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80016a8:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_UART_MspInit+0xec>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_UART_MspInit+0xec>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <HAL_UART_MspInit+0xec>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80016ba:	480c      	ldr	r0, [pc, #48]	; (80016ec <HAL_UART_MspInit+0xec>)
 80016bc:	f000 fe74 	bl	80023a8 <HAL_DMA_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80016c6:	f7ff fed9 	bl	800147c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a07      	ldr	r2, [pc, #28]	; (80016ec <HAL_UART_MspInit+0xec>)
 80016ce:	639a      	str	r2, [r3, #56]	; 0x38
 80016d0:	4a06      	ldr	r2, [pc, #24]	; (80016ec <HAL_UART_MspInit+0xec>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	; 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40011400 	.word	0x40011400
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020800 	.word	0x40020800
 80016ec:	20000178 	.word	0x20000178
 80016f0:	40026428 	.word	0x40026428

080016f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <NMI_Handler+0x4>

080016fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <HardFault_Handler+0x4>

08001700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <MemManage_Handler+0x4>

08001706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <BusFault_Handler+0x4>

0800170c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <UsageFault_Handler+0x4>

08001712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001740:	f000 f8da 	bl	80018f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <DMA2_Stream0_IRQHandler+0x10>)
 800174e:	f000 ff31 	bl	80025b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200000d4 	.word	0x200000d4

0800175c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <DMA2_Stream1_IRQHandler+0x10>)
 8001762:	f000 ff27 	bl	80025b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000178 	.word	0x20000178

08001770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001778:	4a14      	ldr	r2, [pc, #80]	; (80017cc <_sbrk+0x5c>)
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <_sbrk+0x60>)
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <_sbrk+0x64>)
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <_sbrk+0x68>)
 8001790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	429a      	cmp	r2, r3
 800179e:	d207      	bcs.n	80017b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a0:	f002 fb10 	bl	8003dc4 <__errno>
 80017a4:	4603      	mov	r3, r0
 80017a6:	220c      	movs	r2, #12
 80017a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	e009      	b.n	80017c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <_sbrk+0x64>)
 80017c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20020000 	.word	0x20020000
 80017d0:	00000400 	.word	0x00000400
 80017d4:	200001fc 	.word	0x200001fc
 80017d8:	20000218 	.word	0x20000218

080017dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <SystemInit+0x20>)
 80017e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <SystemInit+0x20>)
 80017e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001838 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001804:	480d      	ldr	r0, [pc, #52]	; (800183c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001806:	490e      	ldr	r1, [pc, #56]	; (8001840 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001808:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800180c:	e002      	b.n	8001814 <LoopCopyDataInit>

0800180e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001812:	3304      	adds	r3, #4

08001814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001818:	d3f9      	bcc.n	800180e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181a:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800181c:	4c0b      	ldr	r4, [pc, #44]	; (800184c <LoopFillZerobss+0x26>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001820:	e001      	b.n	8001826 <LoopFillZerobss>

08001822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001824:	3204      	adds	r2, #4

08001826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001828:	d3fb      	bcc.n	8001822 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800182a:	f7ff ffd7 	bl	80017dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800182e:	f002 facf 	bl	8003dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001832:	f7ff fb5d 	bl	8000ef0 <main>
  bx  lr    
 8001836:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001838:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800183c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001840:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001844:	08004790 	.word	0x08004790
  ldr r2, =_sbss
 8001848:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800184c:	20000214 	.word	0x20000214

08001850 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001850:	e7fe      	b.n	8001850 <ADC_IRQHandler>
	...

08001854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <HAL_Init+0x40>)
 800185e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001862:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_Init+0x40>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <HAL_Init+0x40>)
 800186a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800186e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_Init+0x40>)
 8001876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800187c:	2003      	movs	r0, #3
 800187e:	f000 fd51 	bl	8002324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001882:	200f      	movs	r0, #15
 8001884:	f000 f808 	bl	8001898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001888:	f7ff fdfe 	bl	8001488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023c00 	.word	0x40023c00

08001898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_InitTick+0x54>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_InitTick+0x58>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 fd69 	bl	800238e <HAL_SYSTICK_Config>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00e      	b.n	80018e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b0f      	cmp	r3, #15
 80018ca:	d80a      	bhi.n	80018e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018cc:	2200      	movs	r2, #0
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f000 fd31 	bl	800233a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d8:	4a06      	ldr	r2, [pc, #24]	; (80018f4 <HAL_InitTick+0x5c>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e000      	b.n	80018e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000008 	.word	0x20000008
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_IncTick+0x20>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_IncTick+0x24>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4413      	add	r3, r2
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <HAL_IncTick+0x24>)
 800190a:	6013      	str	r3, [r2, #0]
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000008 	.word	0x20000008
 800191c:	20000200 	.word	0x20000200

08001920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return uwTick;
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_GetTick+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000200 	.word	0x20000200

08001938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001940:	f7ff ffee 	bl	8001920 <HAL_GetTick>
 8001944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001950:	d005      	beq.n	800195e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_Delay+0x44>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4413      	add	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800195e:	bf00      	nop
 8001960:	f7ff ffde 	bl	8001920 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	429a      	cmp	r2, r3
 800196e:	d8f7      	bhi.n	8001960 <HAL_Delay+0x28>
  {
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000008 	.word	0x20000008

08001980 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e033      	b.n	80019fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	2b00      	cmp	r3, #0
 800199c:	d109      	bne.n	80019b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff fd9a 	bl	80014d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d118      	bne.n	80019f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019c6:	f023 0302 	bic.w	r3, r3, #2
 80019ca:	f043 0202 	orr.w	r2, r3, #2
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 fa58 	bl	8001e88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f023 0303 	bic.w	r3, r3, #3
 80019e6:	f043 0201 	orr.w	r2, r3, #1
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	641a      	str	r2, [r3, #64]	; 0x40
 80019ee:	e001      	b.n	80019f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_Start_DMA+0x1e>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e0ce      	b.n	8001bc4 <HAL_ADC_Start_DMA+0x1bc>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d018      	beq.n	8001a6e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a4c:	4b5f      	ldr	r3, [pc, #380]	; (8001bcc <HAL_ADC_Start_DMA+0x1c4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a5f      	ldr	r2, [pc, #380]	; (8001bd0 <HAL_ADC_Start_DMA+0x1c8>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	0c9a      	lsrs	r2, r3, #18
 8001a58:	4613      	mov	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a60:	e002      	b.n	8001a68 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f9      	bne.n	8001a62 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a7c:	d107      	bne.n	8001a8e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	f040 8086 	bne.w	8001baa <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001aa6:	f023 0301 	bic.w	r3, r3, #1
 8001aaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d007      	beq.n	8001ad0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ac8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001adc:	d106      	bne.n	8001aec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	f023 0206 	bic.w	r2, r3, #6
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	645a      	str	r2, [r3, #68]	; 0x44
 8001aea:	e002      	b.n	8001af2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001afa:	4b36      	ldr	r3, [pc, #216]	; (8001bd4 <HAL_ADC_Start_DMA+0x1cc>)
 8001afc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b02:	4a35      	ldr	r2, [pc, #212]	; (8001bd8 <HAL_ADC_Start_DMA+0x1d0>)
 8001b04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0a:	4a34      	ldr	r2, [pc, #208]	; (8001bdc <HAL_ADC_Start_DMA+0x1d4>)
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b12:	4a33      	ldr	r2, [pc, #204]	; (8001be0 <HAL_ADC_Start_DMA+0x1d8>)
 8001b14:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b1e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b2e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b3e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	334c      	adds	r3, #76	; 0x4c
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f000 fcd8 	bl	8002504 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10f      	bne.n	8001b80 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d129      	bne.n	8001bc2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	e020      	b.n	8001bc2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <HAL_ADC_Start_DMA+0x1dc>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d11b      	bne.n	8001bc2 <HAL_ADC_Start_DMA+0x1ba>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d114      	bne.n	8001bc2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	e00b      	b.n	8001bc2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f043 0210 	orr.w	r2, r3, #16
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f043 0201 	orr.w	r2, r3, #1
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	431bde83 	.word	0x431bde83
 8001bd4:	40012300 	.word	0x40012300
 8001bd8:	08002081 	.word	0x08002081
 8001bdc:	0800213b 	.word	0x0800213b
 8001be0:	08002157 	.word	0x08002157
 8001be4:	40012000 	.word	0x40012000

08001be8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1c>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e113      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x244>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b09      	cmp	r3, #9
 8001c4e:	d925      	bls.n	8001c9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68d9      	ldr	r1, [r3, #12]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4613      	mov	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4413      	add	r3, r2
 8001c64:	3b1e      	subs	r3, #30
 8001c66:	2207      	movs	r2, #7
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43da      	mvns	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	400a      	ands	r2, r1
 8001c74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68d9      	ldr	r1, [r3, #12]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	4603      	mov	r3, r0
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4403      	add	r3, r0
 8001c8e:	3b1e      	subs	r3, #30
 8001c90:	409a      	lsls	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	e022      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6919      	ldr	r1, [r3, #16]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6919      	ldr	r1, [r3, #16]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4403      	add	r3, r0
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d824      	bhi.n	8001d34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3b05      	subs	r3, #5
 8001cfc:	221f      	movs	r2, #31
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	400a      	ands	r2, r1
 8001d0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	3b05      	subs	r3, #5
 8001d26:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	635a      	str	r2, [r3, #52]	; 0x34
 8001d32:	e04c      	b.n	8001dce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b0c      	cmp	r3, #12
 8001d3a:	d824      	bhi.n	8001d86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3b23      	subs	r3, #35	; 0x23
 8001d4e:	221f      	movs	r2, #31
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43da      	mvns	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	3b23      	subs	r3, #35	; 0x23
 8001d78:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	631a      	str	r2, [r3, #48]	; 0x30
 8001d84:	e023      	b.n	8001dce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	3b41      	subs	r3, #65	; 0x41
 8001d98:	221f      	movs	r2, #31
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	400a      	ands	r2, r1
 8001da6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	4618      	mov	r0, r3
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3b41      	subs	r3, #65	; 0x41
 8001dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dce:	4b29      	ldr	r3, [pc, #164]	; (8001e74 <HAL_ADC_ConfigChannel+0x250>)
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a28      	ldr	r2, [pc, #160]	; (8001e78 <HAL_ADC_ConfigChannel+0x254>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d10f      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1d8>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b12      	cmp	r3, #18
 8001de2:	d10b      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <HAL_ADC_ConfigChannel+0x254>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d12b      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x23a>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1c      	ldr	r2, [pc, #112]	; (8001e7c <HAL_ADC_ConfigChannel+0x258>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d003      	beq.n	8001e18 <HAL_ADC_ConfigChannel+0x1f4>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b11      	cmp	r3, #17
 8001e16:	d122      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a11      	ldr	r2, [pc, #68]	; (8001e7c <HAL_ADC_ConfigChannel+0x258>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d111      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_ADC_ConfigChannel+0x25c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a11      	ldr	r2, [pc, #68]	; (8001e84 <HAL_ADC_ConfigChannel+0x260>)
 8001e40:	fba2 2303 	umull	r2, r3, r2, r3
 8001e44:	0c9a      	lsrs	r2, r3, #18
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e50:	e002      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f9      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	40012300 	.word	0x40012300
 8001e78:	40012000 	.word	0x40012000
 8001e7c:	10000012 	.word	0x10000012
 8001e80:	20000000 	.word	0x20000000
 8001e84:	431bde83 	.word	0x431bde83

08001e88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e90:	4b79      	ldr	r3, [pc, #484]	; (8002078 <ADC_Init+0x1f0>)
 8001e92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ebc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	021a      	lsls	r2, r3, #8
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ee0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6859      	ldr	r1, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6899      	ldr	r1, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1a:	4a58      	ldr	r2, [pc, #352]	; (800207c <ADC_Init+0x1f4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d022      	beq.n	8001f66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6899      	ldr	r1, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6899      	ldr	r1, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	e00f      	b.n	8001f86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0202 	bic.w	r2, r2, #2
 8001f94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6899      	ldr	r1, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7e1b      	ldrb	r3, [r3, #24]
 8001fa0:	005a      	lsls	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d01b      	beq.n	8001fec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fc2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6859      	ldr	r1, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	035a      	lsls	r2, r3, #13
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	e007      	b.n	8001ffc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ffa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	3b01      	subs	r3, #1
 8002018:	051a      	lsls	r2, r3, #20
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002030:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6899      	ldr	r1, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800203e:	025a      	lsls	r2, r3, #9
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002056:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6899      	ldr	r1, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	029a      	lsls	r2, r3, #10
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	609a      	str	r2, [r3, #8]
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	40012300 	.word	0x40012300
 800207c:	0f000001 	.word	0x0f000001

08002080 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002096:	2b00      	cmp	r3, #0
 8002098:	d13c      	bne.n	8002114 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d12b      	bne.n	800210c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d127      	bne.n	800210c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d006      	beq.n	80020d8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d119      	bne.n	800210c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0220 	bic.w	r2, r2, #32
 80020e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f043 0201 	orr.w	r2, r3, #1
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f7ff fd6b 	bl	8001be8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002112:	e00e      	b.n	8002132 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f7ff fd75 	bl	8001c10 <HAL_ADC_ErrorCallback>
}
 8002126:	e004      	b.n	8002132 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	4798      	blx	r3
}
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002146:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f7ff fd57 	bl	8001bfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002162:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2240      	movs	r2, #64	; 0x40
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f043 0204 	orr.w	r2, r3, #4
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f7ff fd4a 	bl	8001c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a0:	4013      	ands	r3, r2
 80021a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b6:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60d3      	str	r3, [r2, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <__NVIC_GetPriorityGrouping+0x18>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 0307 	and.w	r3, r3, #7
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db0b      	blt.n	8002212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4907      	ldr	r1, [pc, #28]	; (8002220 <__NVIC_EnableIRQ+0x38>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	2001      	movs	r0, #1
 800220a:	fa00 f202 	lsl.w	r2, r0, r2
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000e100 	.word	0xe000e100

08002224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	2b00      	cmp	r3, #0
 8002236:	db0a      	blt.n	800224e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	490c      	ldr	r1, [pc, #48]	; (8002270 <__NVIC_SetPriority+0x4c>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	0112      	lsls	r2, r2, #4
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	440b      	add	r3, r1
 8002248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800224c:	e00a      	b.n	8002264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4908      	ldr	r1, [pc, #32]	; (8002274 <__NVIC_SetPriority+0x50>)
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	3b04      	subs	r3, #4
 800225c:	0112      	lsls	r2, r2, #4
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	440b      	add	r3, r1
 8002262:	761a      	strb	r2, [r3, #24]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000e100 	.word	0xe000e100
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	; 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f1c3 0307 	rsb	r3, r3, #7
 8002292:	2b04      	cmp	r3, #4
 8002294:	bf28      	it	cs
 8002296:	2304      	movcs	r3, #4
 8002298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3304      	adds	r3, #4
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d902      	bls.n	80022a8 <NVIC_EncodePriority+0x30>
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3b03      	subs	r3, #3
 80022a6:	e000      	b.n	80022aa <NVIC_EncodePriority+0x32>
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43da      	mvns	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	401a      	ands	r2, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	43d9      	mvns	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	4313      	orrs	r3, r2
         );
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3724      	adds	r7, #36	; 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f0:	d301      	bcc.n	80022f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00f      	b.n	8002316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f6:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <SysTick_Config+0x40>)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fe:	210f      	movs	r1, #15
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	f7ff ff8e 	bl	8002224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <SysTick_Config+0x40>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230e:	4b04      	ldr	r3, [pc, #16]	; (8002320 <SysTick_Config+0x40>)
 8002310:	2207      	movs	r2, #7
 8002312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	e000e010 	.word	0xe000e010

08002324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ff29 	bl	8002184 <__NVIC_SetPriorityGrouping>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800234c:	f7ff ff3e 	bl	80021cc <__NVIC_GetPriorityGrouping>
 8002350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	6978      	ldr	r0, [r7, #20]
 8002358:	f7ff ff8e 	bl	8002278 <NVIC_EncodePriority>
 800235c:	4602      	mov	r2, r0
 800235e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff5d 	bl	8002224 <__NVIC_SetPriority>
}
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff31 	bl	80021e8 <__NVIC_EnableIRQ>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ffa2 	bl	80022e0 <SysTick_Config>
 800239c:	4603      	mov	r3, r0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff fab4 	bl	8001920 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e099      	b.n	80024f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e4:	e00f      	b.n	8002406 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023e6:	f7ff fa9b 	bl	8001920 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d908      	bls.n	8002406 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2203      	movs	r2, #3
 80023fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e078      	b.n	80024f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1e8      	bne.n	80023e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	4b38      	ldr	r3, [pc, #224]	; (8002500 <HAL_DMA_Init+0x158>)
 8002420:	4013      	ands	r3, r2
 8002422:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002432:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800243e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	2b04      	cmp	r3, #4
 800245e:	d107      	bne.n	8002470 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	4313      	orrs	r3, r2
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f023 0307 	bic.w	r3, r3, #7
 8002486:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	4313      	orrs	r3, r2
 8002490:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	2b04      	cmp	r3, #4
 8002498:	d117      	bne.n	80024ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00e      	beq.n	80024ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fa6f 	bl	8002990 <DMA_CheckFifoParam>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2240      	movs	r2, #64	; 0x40
 80024bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024c6:	2301      	movs	r3, #1
 80024c8:	e016      	b.n	80024f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fa26 	bl	8002924 <DMA_CalcBaseAndBitshift>
 80024d8:	4603      	mov	r3, r0
 80024da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e0:	223f      	movs	r2, #63	; 0x3f
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	f010803f 	.word	0xf010803f

08002504 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_DMA_Start_IT+0x26>
 8002526:	2302      	movs	r3, #2
 8002528:	e040      	b.n	80025ac <HAL_DMA_Start_IT+0xa8>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d12f      	bne.n	800259e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2202      	movs	r2, #2
 8002542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f9b8 	bl	80028c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	223f      	movs	r2, #63	; 0x3f
 800255e:	409a      	lsls	r2, r3
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0216 	orr.w	r2, r2, #22
 8002572:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	2b00      	cmp	r3, #0
 800257a:	d007      	beq.n	800258c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0208 	orr.w	r2, r2, #8
 800258a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e005      	b.n	80025aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025a6:	2302      	movs	r3, #2
 80025a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025c0:	4b8e      	ldr	r3, [pc, #568]	; (80027fc <HAL_DMA_IRQHandler+0x248>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a8e      	ldr	r2, [pc, #568]	; (8002800 <HAL_DMA_IRQHandler+0x24c>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	0a9b      	lsrs	r3, r3, #10
 80025cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025de:	2208      	movs	r2, #8
 80025e0:	409a      	lsls	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d01a      	beq.n	8002620 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d013      	beq.n	8002620 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0204 	bic.w	r2, r2, #4
 8002606:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260c:	2208      	movs	r2, #8
 800260e:	409a      	lsls	r2, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002618:	f043 0201 	orr.w	r2, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002624:	2201      	movs	r2, #1
 8002626:	409a      	lsls	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d012      	beq.n	8002656 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00b      	beq.n	8002656 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	2201      	movs	r2, #1
 8002644:	409a      	lsls	r2, r3
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	f043 0202 	orr.w	r2, r3, #2
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265a:	2204      	movs	r2, #4
 800265c:	409a      	lsls	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4013      	ands	r3, r2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d012      	beq.n	800268c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00b      	beq.n	800268c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002678:	2204      	movs	r2, #4
 800267a:	409a      	lsls	r2, r3
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002684:	f043 0204 	orr.w	r2, r3, #4
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002690:	2210      	movs	r2, #16
 8002692:	409a      	lsls	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d043      	beq.n	8002724 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d03c      	beq.n	8002724 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ae:	2210      	movs	r2, #16
 80026b0:	409a      	lsls	r2, r3
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d018      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d108      	bne.n	80026e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d024      	beq.n	8002724 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	4798      	blx	r3
 80026e2:	e01f      	b.n	8002724 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d01b      	beq.n	8002724 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	4798      	blx	r3
 80026f4:	e016      	b.n	8002724 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d107      	bne.n	8002714 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0208 	bic.w	r2, r2, #8
 8002712:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002728:	2220      	movs	r2, #32
 800272a:	409a      	lsls	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 808f 	beq.w	8002854 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 8087 	beq.w	8002854 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274a:	2220      	movs	r2, #32
 800274c:	409a      	lsls	r2, r3
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b05      	cmp	r3, #5
 800275c:	d136      	bne.n	80027cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0216 	bic.w	r2, r2, #22
 800276c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800277c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	2b00      	cmp	r3, #0
 8002784:	d103      	bne.n	800278e <HAL_DMA_IRQHandler+0x1da>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278a:	2b00      	cmp	r3, #0
 800278c:	d007      	beq.n	800279e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0208 	bic.w	r2, r2, #8
 800279c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a2:	223f      	movs	r2, #63	; 0x3f
 80027a4:	409a      	lsls	r2, r3
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d07e      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	4798      	blx	r3
        }
        return;
 80027ca:	e079      	b.n	80028c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d01d      	beq.n	8002816 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10d      	bne.n	8002804 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d031      	beq.n	8002854 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	4798      	blx	r3
 80027f8:	e02c      	b.n	8002854 <HAL_DMA_IRQHandler+0x2a0>
 80027fa:	bf00      	nop
 80027fc:	20000000 	.word	0x20000000
 8002800:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002808:	2b00      	cmp	r3, #0
 800280a:	d023      	beq.n	8002854 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	4798      	blx	r3
 8002814:	e01e      	b.n	8002854 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10f      	bne.n	8002844 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0210 	bic.w	r2, r2, #16
 8002832:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002858:	2b00      	cmp	r3, #0
 800285a:	d032      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d022      	beq.n	80028ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2205      	movs	r2, #5
 800286c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	3301      	adds	r3, #1
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	429a      	cmp	r2, r3
 800288a:	d307      	bcc.n	800289c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f2      	bne.n	8002880 <HAL_DMA_IRQHandler+0x2cc>
 800289a:	e000      	b.n	800289e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800289c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	4798      	blx	r3
 80028be:	e000      	b.n	80028c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80028c0:	bf00      	nop
    }
  }
}
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b40      	cmp	r3, #64	; 0x40
 80028f4:	d108      	bne.n	8002908 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002906:	e007      	b.n	8002918 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	60da      	str	r2, [r3, #12]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	3b10      	subs	r3, #16
 8002934:	4a14      	ldr	r2, [pc, #80]	; (8002988 <DMA_CalcBaseAndBitshift+0x64>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800293e:	4a13      	ldr	r2, [pc, #76]	; (800298c <DMA_CalcBaseAndBitshift+0x68>)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b03      	cmp	r3, #3
 8002950:	d909      	bls.n	8002966 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800295a:	f023 0303 	bic.w	r3, r3, #3
 800295e:	1d1a      	adds	r2, r3, #4
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	659a      	str	r2, [r3, #88]	; 0x58
 8002964:	e007      	b.n	8002976 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800296e:	f023 0303 	bic.w	r3, r3, #3
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	aaaaaaab 	.word	0xaaaaaaab
 800298c:	08004744 	.word	0x08004744

08002990 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d11f      	bne.n	80029ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d856      	bhi.n	8002a5e <DMA_CheckFifoParam+0xce>
 80029b0:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <DMA_CheckFifoParam+0x28>)
 80029b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b6:	bf00      	nop
 80029b8:	080029c9 	.word	0x080029c9
 80029bc:	080029db 	.word	0x080029db
 80029c0:	080029c9 	.word	0x080029c9
 80029c4:	08002a5f 	.word	0x08002a5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d046      	beq.n	8002a62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d8:	e043      	b.n	8002a62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029e2:	d140      	bne.n	8002a66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e8:	e03d      	b.n	8002a66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f2:	d121      	bne.n	8002a38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d837      	bhi.n	8002a6a <DMA_CheckFifoParam+0xda>
 80029fa:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <DMA_CheckFifoParam+0x70>)
 80029fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a00:	08002a11 	.word	0x08002a11
 8002a04:	08002a17 	.word	0x08002a17
 8002a08:	08002a11 	.word	0x08002a11
 8002a0c:	08002a29 	.word	0x08002a29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
      break;
 8002a14:	e030      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d025      	beq.n	8002a6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a26:	e022      	b.n	8002a6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a30:	d11f      	bne.n	8002a72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a36:	e01c      	b.n	8002a72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d903      	bls.n	8002a46 <DMA_CheckFifoParam+0xb6>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d003      	beq.n	8002a4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a44:	e018      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
      break;
 8002a4a:	e015      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00e      	beq.n	8002a76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5c:	e00b      	b.n	8002a76 <DMA_CheckFifoParam+0xe6>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e00a      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      break;
 8002a62:	bf00      	nop
 8002a64:	e008      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      break;
 8002a66:	bf00      	nop
 8002a68:	e006      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e004      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e002      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a72:	bf00      	nop
 8002a74:	e000      	b.n	8002a78 <DMA_CheckFifoParam+0xe8>
      break;
 8002a76:	bf00      	nop
    }
  } 
  
  return status; 
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop

08002a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b089      	sub	sp, #36	; 0x24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	e159      	b.n	8002d58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	f040 8148 	bne.w	8002d52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d005      	beq.n	8002ada <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d130      	bne.n	8002b3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b10:	2201      	movs	r2, #1
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 0201 	and.w	r2, r3, #1
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d017      	beq.n	8002b78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	2203      	movs	r2, #3
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d123      	bne.n	8002bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	08da      	lsrs	r2, r3, #3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3208      	adds	r2, #8
 8002b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	220f      	movs	r2, #15
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	08da      	lsrs	r2, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3208      	adds	r2, #8
 8002bc6:	69b9      	ldr	r1, [r7, #24]
 8002bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0203 	and.w	r2, r3, #3
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80a2 	beq.w	8002d52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	4b57      	ldr	r3, [pc, #348]	; (8002d70 <HAL_GPIO_Init+0x2e8>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	4a56      	ldr	r2, [pc, #344]	; (8002d70 <HAL_GPIO_Init+0x2e8>)
 8002c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1e:	4b54      	ldr	r3, [pc, #336]	; (8002d70 <HAL_GPIO_Init+0x2e8>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c2a:	4a52      	ldr	r2, [pc, #328]	; (8002d74 <HAL_GPIO_Init+0x2ec>)
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	3302      	adds	r3, #2
 8002c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	220f      	movs	r2, #15
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a49      	ldr	r2, [pc, #292]	; (8002d78 <HAL_GPIO_Init+0x2f0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d019      	beq.n	8002c8a <HAL_GPIO_Init+0x202>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a48      	ldr	r2, [pc, #288]	; (8002d7c <HAL_GPIO_Init+0x2f4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <HAL_GPIO_Init+0x1fe>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a47      	ldr	r2, [pc, #284]	; (8002d80 <HAL_GPIO_Init+0x2f8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00d      	beq.n	8002c82 <HAL_GPIO_Init+0x1fa>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a46      	ldr	r2, [pc, #280]	; (8002d84 <HAL_GPIO_Init+0x2fc>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d007      	beq.n	8002c7e <HAL_GPIO_Init+0x1f6>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a45      	ldr	r2, [pc, #276]	; (8002d88 <HAL_GPIO_Init+0x300>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d101      	bne.n	8002c7a <HAL_GPIO_Init+0x1f2>
 8002c76:	2304      	movs	r3, #4
 8002c78:	e008      	b.n	8002c8c <HAL_GPIO_Init+0x204>
 8002c7a:	2307      	movs	r3, #7
 8002c7c:	e006      	b.n	8002c8c <HAL_GPIO_Init+0x204>
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e004      	b.n	8002c8c <HAL_GPIO_Init+0x204>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e002      	b.n	8002c8c <HAL_GPIO_Init+0x204>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <HAL_GPIO_Init+0x204>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	f002 0203 	and.w	r2, r2, #3
 8002c92:	0092      	lsls	r2, r2, #2
 8002c94:	4093      	lsls	r3, r2
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c9c:	4935      	ldr	r1, [pc, #212]	; (8002d74 <HAL_GPIO_Init+0x2ec>)
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	089b      	lsrs	r3, r3, #2
 8002ca2:	3302      	adds	r3, #2
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002caa:	4b38      	ldr	r3, [pc, #224]	; (8002d8c <HAL_GPIO_Init+0x304>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cce:	4a2f      	ldr	r2, [pc, #188]	; (8002d8c <HAL_GPIO_Init+0x304>)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cd4:	4b2d      	ldr	r3, [pc, #180]	; (8002d8c <HAL_GPIO_Init+0x304>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cf8:	4a24      	ldr	r2, [pc, #144]	; (8002d8c <HAL_GPIO_Init+0x304>)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cfe:	4b23      	ldr	r3, [pc, #140]	; (8002d8c <HAL_GPIO_Init+0x304>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d22:	4a1a      	ldr	r2, [pc, #104]	; (8002d8c <HAL_GPIO_Init+0x304>)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d28:	4b18      	ldr	r3, [pc, #96]	; (8002d8c <HAL_GPIO_Init+0x304>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d4c:	4a0f      	ldr	r2, [pc, #60]	; (8002d8c <HAL_GPIO_Init+0x304>)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3301      	adds	r3, #1
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b0f      	cmp	r3, #15
 8002d5c:	f67f aea2 	bls.w	8002aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	3724      	adds	r7, #36	; 0x24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40013800 	.word	0x40013800
 8002d78:	40020000 	.word	0x40020000
 8002d7c:	40020400 	.word	0x40020400
 8002d80:	40020800 	.word	0x40020800
 8002d84:	40020c00 	.word	0x40020c00
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40013c00 	.word	0x40013c00

08002d90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e267      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d075      	beq.n	8002e9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dae:	4b88      	ldr	r3, [pc, #544]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d00c      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dba:	4b85      	ldr	r3, [pc, #532]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d112      	bne.n	8002dec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dc6:	4b82      	ldr	r3, [pc, #520]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd2:	d10b      	bne.n	8002dec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd4:	4b7e      	ldr	r3, [pc, #504]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d05b      	beq.n	8002e98 <HAL_RCC_OscConfig+0x108>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d157      	bne.n	8002e98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e242      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df4:	d106      	bne.n	8002e04 <HAL_RCC_OscConfig+0x74>
 8002df6:	4b76      	ldr	r3, [pc, #472]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a75      	ldr	r2, [pc, #468]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e01d      	b.n	8002e40 <HAL_RCC_OscConfig+0xb0>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e0c:	d10c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x98>
 8002e0e:	4b70      	ldr	r3, [pc, #448]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a6f      	ldr	r2, [pc, #444]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	4b6d      	ldr	r3, [pc, #436]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a6c      	ldr	r2, [pc, #432]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	e00b      	b.n	8002e40 <HAL_RCC_OscConfig+0xb0>
 8002e28:	4b69      	ldr	r3, [pc, #420]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a68      	ldr	r2, [pc, #416]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	4b66      	ldr	r3, [pc, #408]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a65      	ldr	r2, [pc, #404]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d013      	beq.n	8002e70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fe fd6a 	bl	8001920 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fe fd66 	bl	8001920 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e207      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e62:	4b5b      	ldr	r3, [pc, #364]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0xc0>
 8002e6e:	e014      	b.n	8002e9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e70:	f7fe fd56 	bl	8001920 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e78:	f7fe fd52 	bl	8001920 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	; 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e1f3      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8a:	4b51      	ldr	r3, [pc, #324]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0xe8>
 8002e96:	e000      	b.n	8002e9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d063      	beq.n	8002f6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ea6:	4b4a      	ldr	r3, [pc, #296]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00b      	beq.n	8002eca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eb2:	4b47      	ldr	r3, [pc, #284]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d11c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ebe:	4b44      	ldr	r3, [pc, #272]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d116      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eca:	4b41      	ldr	r3, [pc, #260]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d005      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x152>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d001      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e1c7      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee2:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4937      	ldr	r1, [pc, #220]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef6:	e03a      	b.n	8002f6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d020      	beq.n	8002f42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f00:	4b34      	ldr	r3, [pc, #208]	; (8002fd4 <HAL_RCC_OscConfig+0x244>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f06:	f7fe fd0b 	bl	8001920 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f0e:	f7fe fd07 	bl	8001920 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e1a8      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f20:	4b2b      	ldr	r3, [pc, #172]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2c:	4b28      	ldr	r3, [pc, #160]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4925      	ldr	r1, [pc, #148]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	600b      	str	r3, [r1, #0]
 8002f40:	e015      	b.n	8002f6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f42:	4b24      	ldr	r3, [pc, #144]	; (8002fd4 <HAL_RCC_OscConfig+0x244>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe fcea 	bl	8001920 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f50:	f7fe fce6 	bl	8001920 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e187      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f62:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d036      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d016      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f82:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <HAL_RCC_OscConfig+0x248>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f88:	f7fe fcca 	bl	8001920 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f90:	f7fe fcc6 	bl	8001920 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e167      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0x200>
 8002fae:	e01b      	b.n	8002fe8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb0:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <HAL_RCC_OscConfig+0x248>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe fcb3 	bl	8001920 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbc:	e00e      	b.n	8002fdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fbe:	f7fe fcaf 	bl	8001920 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d907      	bls.n	8002fdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e150      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	42470000 	.word	0x42470000
 8002fd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fdc:	4b88      	ldr	r3, [pc, #544]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 8002fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1ea      	bne.n	8002fbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 8097 	beq.w	8003124 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ffa:	4b81      	ldr	r3, [pc, #516]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10f      	bne.n	8003026 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	4b7d      	ldr	r3, [pc, #500]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	4a7c      	ldr	r2, [pc, #496]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 8003010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003014:	6413      	str	r3, [r2, #64]	; 0x40
 8003016:	4b7a      	ldr	r3, [pc, #488]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003022:	2301      	movs	r3, #1
 8003024:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003026:	4b77      	ldr	r3, [pc, #476]	; (8003204 <HAL_RCC_OscConfig+0x474>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d118      	bne.n	8003064 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003032:	4b74      	ldr	r3, [pc, #464]	; (8003204 <HAL_RCC_OscConfig+0x474>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a73      	ldr	r2, [pc, #460]	; (8003204 <HAL_RCC_OscConfig+0x474>)
 8003038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303e:	f7fe fc6f 	bl	8001920 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003046:	f7fe fc6b 	bl	8001920 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e10c      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003058:	4b6a      	ldr	r3, [pc, #424]	; (8003204 <HAL_RCC_OscConfig+0x474>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d106      	bne.n	800307a <HAL_RCC_OscConfig+0x2ea>
 800306c:	4b64      	ldr	r3, [pc, #400]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003070:	4a63      	ldr	r2, [pc, #396]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	6713      	str	r3, [r2, #112]	; 0x70
 8003078:	e01c      	b.n	80030b4 <HAL_RCC_OscConfig+0x324>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b05      	cmp	r3, #5
 8003080:	d10c      	bne.n	800309c <HAL_RCC_OscConfig+0x30c>
 8003082:	4b5f      	ldr	r3, [pc, #380]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	4a5e      	ldr	r2, [pc, #376]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 8003088:	f043 0304 	orr.w	r3, r3, #4
 800308c:	6713      	str	r3, [r2, #112]	; 0x70
 800308e:	4b5c      	ldr	r3, [pc, #368]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	4a5b      	ldr	r2, [pc, #364]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	6713      	str	r3, [r2, #112]	; 0x70
 800309a:	e00b      	b.n	80030b4 <HAL_RCC_OscConfig+0x324>
 800309c:	4b58      	ldr	r3, [pc, #352]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 800309e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a0:	4a57      	ldr	r2, [pc, #348]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 80030a2:	f023 0301 	bic.w	r3, r3, #1
 80030a6:	6713      	str	r3, [r2, #112]	; 0x70
 80030a8:	4b55      	ldr	r3, [pc, #340]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 80030aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ac:	4a54      	ldr	r2, [pc, #336]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 80030ae:	f023 0304 	bic.w	r3, r3, #4
 80030b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d015      	beq.n	80030e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030bc:	f7fe fc30 	bl	8001920 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c2:	e00a      	b.n	80030da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c4:	f7fe fc2c 	bl	8001920 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e0cb      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030da:	4b49      	ldr	r3, [pc, #292]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 80030dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0ee      	beq.n	80030c4 <HAL_RCC_OscConfig+0x334>
 80030e6:	e014      	b.n	8003112 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e8:	f7fe fc1a 	bl	8001920 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030f0:	f7fe fc16 	bl	8001920 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e0b5      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003106:	4b3e      	ldr	r3, [pc, #248]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 8003108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1ee      	bne.n	80030f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003112:	7dfb      	ldrb	r3, [r7, #23]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d105      	bne.n	8003124 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003118:	4b39      	ldr	r3, [pc, #228]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	4a38      	ldr	r2, [pc, #224]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 800311e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003122:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80a1 	beq.w	8003270 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800312e:	4b34      	ldr	r3, [pc, #208]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b08      	cmp	r3, #8
 8003138:	d05c      	beq.n	80031f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d141      	bne.n	80031c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003142:	4b31      	ldr	r3, [pc, #196]	; (8003208 <HAL_RCC_OscConfig+0x478>)
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7fe fbea 	bl	8001920 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003150:	f7fe fbe6 	bl	8001920 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e087      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003162:	4b27      	ldr	r3, [pc, #156]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69da      	ldr	r2, [r3, #28]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	019b      	lsls	r3, r3, #6
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003184:	085b      	lsrs	r3, r3, #1
 8003186:	3b01      	subs	r3, #1
 8003188:	041b      	lsls	r3, r3, #16
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	061b      	lsls	r3, r3, #24
 8003192:	491b      	ldr	r1, [pc, #108]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 8003194:	4313      	orrs	r3, r2
 8003196:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003198:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <HAL_RCC_OscConfig+0x478>)
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319e:	f7fe fbbf 	bl	8001920 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a6:	f7fe fbbb 	bl	8001920 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e05c      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b8:	4b11      	ldr	r3, [pc, #68]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x416>
 80031c4:	e054      	b.n	8003270 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c6:	4b10      	ldr	r3, [pc, #64]	; (8003208 <HAL_RCC_OscConfig+0x478>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031cc:	f7fe fba8 	bl	8001920 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d4:	f7fe fba4 	bl	8001920 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e045      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e6:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_RCC_OscConfig+0x470>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0x444>
 80031f2:	e03d      	b.n	8003270 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d107      	bne.n	800320c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e038      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
 8003200:	40023800 	.word	0x40023800
 8003204:	40007000 	.word	0x40007000
 8003208:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800320c:	4b1b      	ldr	r3, [pc, #108]	; (800327c <HAL_RCC_OscConfig+0x4ec>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d028      	beq.n	800326c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003224:	429a      	cmp	r2, r3
 8003226:	d121      	bne.n	800326c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d11a      	bne.n	800326c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800323c:	4013      	ands	r3, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003242:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003244:	4293      	cmp	r3, r2
 8003246:	d111      	bne.n	800326c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	085b      	lsrs	r3, r3, #1
 8003254:	3b01      	subs	r3, #1
 8003256:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d107      	bne.n	800326c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d001      	beq.n	8003270 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800

08003280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0cc      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003294:	4b68      	ldr	r3, [pc, #416]	; (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d90c      	bls.n	80032bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a2:	4b65      	ldr	r3, [pc, #404]	; (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032aa:	4b63      	ldr	r3, [pc, #396]	; (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0b8      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d020      	beq.n	800330a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d4:	4b59      	ldr	r3, [pc, #356]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4a58      	ldr	r2, [pc, #352]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032ec:	4b53      	ldr	r3, [pc, #332]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4a52      	ldr	r2, [pc, #328]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f8:	4b50      	ldr	r3, [pc, #320]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	494d      	ldr	r1, [pc, #308]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	4313      	orrs	r3, r2
 8003308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d044      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d107      	bne.n	800332e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331e:	4b47      	ldr	r3, [pc, #284]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d119      	bne.n	800335e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e07f      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d003      	beq.n	800333e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800333a:	2b03      	cmp	r3, #3
 800333c:	d107      	bne.n	800334e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333e:	4b3f      	ldr	r3, [pc, #252]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e06f      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334e:	4b3b      	ldr	r3, [pc, #236]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e067      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800335e:	4b37      	ldr	r3, [pc, #220]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f023 0203 	bic.w	r2, r3, #3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	4934      	ldr	r1, [pc, #208]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	4313      	orrs	r3, r2
 800336e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003370:	f7fe fad6 	bl	8001920 <HAL_GetTick>
 8003374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003376:	e00a      	b.n	800338e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003378:	f7fe fad2 	bl	8001920 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	; 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e04f      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338e:	4b2b      	ldr	r3, [pc, #172]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 020c 	and.w	r2, r3, #12
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	429a      	cmp	r2, r3
 800339e:	d1eb      	bne.n	8003378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033a0:	4b25      	ldr	r3, [pc, #148]	; (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d20c      	bcs.n	80033c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	4b22      	ldr	r3, [pc, #136]	; (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b6:	4b20      	ldr	r3, [pc, #128]	; (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d001      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e032      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d4:	4b19      	ldr	r3, [pc, #100]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4916      	ldr	r1, [pc, #88]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d009      	beq.n	8003406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f2:	4b12      	ldr	r3, [pc, #72]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	490e      	ldr	r1, [pc, #56]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003406:	f000 f821 	bl	800344c <HAL_RCC_GetSysClockFreq>
 800340a:	4602      	mov	r2, r0
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	091b      	lsrs	r3, r3, #4
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	490a      	ldr	r1, [pc, #40]	; (8003440 <HAL_RCC_ClockConfig+0x1c0>)
 8003418:	5ccb      	ldrb	r3, [r1, r3]
 800341a:	fa22 f303 	lsr.w	r3, r2, r3
 800341e:	4a09      	ldr	r2, [pc, #36]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 8003420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003422:	4b09      	ldr	r3, [pc, #36]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe fa36 	bl	8001898 <HAL_InitTick>

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40023c00 	.word	0x40023c00
 800343c:	40023800 	.word	0x40023800
 8003440:	0800472c 	.word	0x0800472c
 8003444:	20000000 	.word	0x20000000
 8003448:	20000004 	.word	0x20000004

0800344c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800344c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003450:	b090      	sub	sp, #64	; 0x40
 8003452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	637b      	str	r3, [r7, #52]	; 0x34
 8003458:	2300      	movs	r3, #0
 800345a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800345c:	2300      	movs	r3, #0
 800345e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003464:	4b59      	ldr	r3, [pc, #356]	; (80035cc <HAL_RCC_GetSysClockFreq+0x180>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	2b08      	cmp	r3, #8
 800346e:	d00d      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x40>
 8003470:	2b08      	cmp	r3, #8
 8003472:	f200 80a1 	bhi.w	80035b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x34>
 800347a:	2b04      	cmp	r3, #4
 800347c:	d003      	beq.n	8003486 <HAL_RCC_GetSysClockFreq+0x3a>
 800347e:	e09b      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003480:	4b53      	ldr	r3, [pc, #332]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003482:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003484:	e09b      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003486:	4b53      	ldr	r3, [pc, #332]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003488:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800348a:	e098      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800348c:	4b4f      	ldr	r3, [pc, #316]	; (80035cc <HAL_RCC_GetSysClockFreq+0x180>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003494:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003496:	4b4d      	ldr	r3, [pc, #308]	; (80035cc <HAL_RCC_GetSysClockFreq+0x180>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d028      	beq.n	80034f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a2:	4b4a      	ldr	r3, [pc, #296]	; (80035cc <HAL_RCC_GetSysClockFreq+0x180>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	099b      	lsrs	r3, r3, #6
 80034a8:	2200      	movs	r2, #0
 80034aa:	623b      	str	r3, [r7, #32]
 80034ac:	627a      	str	r2, [r7, #36]	; 0x24
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034b4:	2100      	movs	r1, #0
 80034b6:	4b47      	ldr	r3, [pc, #284]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80034b8:	fb03 f201 	mul.w	r2, r3, r1
 80034bc:	2300      	movs	r3, #0
 80034be:	fb00 f303 	mul.w	r3, r0, r3
 80034c2:	4413      	add	r3, r2
 80034c4:	4a43      	ldr	r2, [pc, #268]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80034c6:	fba0 1202 	umull	r1, r2, r0, r2
 80034ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034cc:	460a      	mov	r2, r1
 80034ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80034d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034d2:	4413      	add	r3, r2
 80034d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d8:	2200      	movs	r2, #0
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	61fa      	str	r2, [r7, #28]
 80034de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80034e6:	f7fd faf1 	bl	8000acc <__aeabi_uldivmod>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4613      	mov	r3, r2
 80034f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f2:	e053      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f4:	4b35      	ldr	r3, [pc, #212]	; (80035cc <HAL_RCC_GetSysClockFreq+0x180>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	099b      	lsrs	r3, r3, #6
 80034fa:	2200      	movs	r2, #0
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	617a      	str	r2, [r7, #20]
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003506:	f04f 0b00 	mov.w	fp, #0
 800350a:	4652      	mov	r2, sl
 800350c:	465b      	mov	r3, fp
 800350e:	f04f 0000 	mov.w	r0, #0
 8003512:	f04f 0100 	mov.w	r1, #0
 8003516:	0159      	lsls	r1, r3, #5
 8003518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800351c:	0150      	lsls	r0, r2, #5
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	ebb2 080a 	subs.w	r8, r2, sl
 8003526:	eb63 090b 	sbc.w	r9, r3, fp
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003536:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800353a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800353e:	ebb2 0408 	subs.w	r4, r2, r8
 8003542:	eb63 0509 	sbc.w	r5, r3, r9
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	00eb      	lsls	r3, r5, #3
 8003550:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003554:	00e2      	lsls	r2, r4, #3
 8003556:	4614      	mov	r4, r2
 8003558:	461d      	mov	r5, r3
 800355a:	eb14 030a 	adds.w	r3, r4, sl
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	eb45 030b 	adc.w	r3, r5, fp
 8003564:	607b      	str	r3, [r7, #4]
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003572:	4629      	mov	r1, r5
 8003574:	028b      	lsls	r3, r1, #10
 8003576:	4621      	mov	r1, r4
 8003578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800357c:	4621      	mov	r1, r4
 800357e:	028a      	lsls	r2, r1, #10
 8003580:	4610      	mov	r0, r2
 8003582:	4619      	mov	r1, r3
 8003584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003586:	2200      	movs	r2, #0
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	60fa      	str	r2, [r7, #12]
 800358c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003590:	f7fd fa9c 	bl	8000acc <__aeabi_uldivmod>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4613      	mov	r3, r2
 800359a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_GetSysClockFreq+0x180>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	0c1b      	lsrs	r3, r3, #16
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	3301      	adds	r3, #1
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80035ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035b6:	e002      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80035ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3740      	adds	r7, #64	; 0x40
 80035c4:	46bd      	mov	sp, r7
 80035c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ca:	bf00      	nop
 80035cc:	40023800 	.word	0x40023800
 80035d0:	00f42400 	.word	0x00f42400
 80035d4:	017d7840 	.word	0x017d7840

080035d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <HAL_RCC_GetHCLKFreq+0x14>)
 80035de:	681b      	ldr	r3, [r3, #0]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000000 	.word	0x20000000

080035f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035f4:	f7ff fff0 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	0a9b      	lsrs	r3, r3, #10
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	4903      	ldr	r1, [pc, #12]	; (8003614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003606:	5ccb      	ldrb	r3, [r1, r3]
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800360c:	4618      	mov	r0, r3
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40023800 	.word	0x40023800
 8003614:	0800473c 	.word	0x0800473c

08003618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800361c:	f7ff ffdc 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 8003620:	4602      	mov	r2, r0
 8003622:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	0b5b      	lsrs	r3, r3, #13
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	4903      	ldr	r1, [pc, #12]	; (800363c <HAL_RCC_GetPCLK2Freq+0x24>)
 800362e:	5ccb      	ldrb	r3, [r1, r3]
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40023800 	.word	0x40023800
 800363c:	0800473c 	.word	0x0800473c

08003640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e03f      	b.n	80036d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd ffca 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2224      	movs	r2, #36	; 0x24
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f929 	bl	80038dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b08a      	sub	sp, #40	; 0x28
 80036de:	af02      	add	r7, sp, #8
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	603b      	str	r3, [r7, #0]
 80036e6:	4613      	mov	r3, r2
 80036e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d17c      	bne.n	80037f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <HAL_UART_Transmit+0x2c>
 8003700:	88fb      	ldrh	r3, [r7, #6]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e075      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UART_Transmit+0x3e>
 8003714:	2302      	movs	r3, #2
 8003716:	e06e      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2221      	movs	r2, #33	; 0x21
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800372e:	f7fe f8f7 	bl	8001920 <HAL_GetTick>
 8003732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	88fa      	ldrh	r2, [r7, #6]
 8003738:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	88fa      	ldrh	r2, [r7, #6]
 800373e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003748:	d108      	bne.n	800375c <HAL_UART_Transmit+0x82>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d104      	bne.n	800375c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	e003      	b.n	8003764 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003760:	2300      	movs	r3, #0
 8003762:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800376c:	e02a      	b.n	80037c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2200      	movs	r2, #0
 8003776:	2180      	movs	r1, #128	; 0x80
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f840 	bl	80037fe <UART_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e036      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10b      	bne.n	80037a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800379c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	3302      	adds	r3, #2
 80037a2:	61bb      	str	r3, [r7, #24]
 80037a4:	e007      	b.n	80037b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	781a      	ldrb	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	3301      	adds	r3, #1
 80037b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1cf      	bne.n	800376e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2200      	movs	r2, #0
 80037d6:	2140      	movs	r1, #64	; 0x40
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f810 	bl	80037fe <UART_WaitOnFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e006      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	e000      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
  }
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b090      	sub	sp, #64	; 0x40
 8003802:	af00      	add	r7, sp, #0
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	4613      	mov	r3, r2
 800380c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800380e:	e050      	b.n	80038b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d04c      	beq.n	80038b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <UART_WaitOnFlagUntilTimeout+0x30>
 800381e:	f7fe f87f 	bl	8001920 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800382a:	429a      	cmp	r2, r3
 800382c:	d241      	bcs.n	80038b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	330c      	adds	r3, #12
 8003834:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003838:	e853 3f00 	ldrex	r3, [r3]
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003844:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	330c      	adds	r3, #12
 800384c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800384e:	637a      	str	r2, [r7, #52]	; 0x34
 8003850:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003852:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003856:	e841 2300 	strex	r3, r2, [r1]
 800385a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1e5      	bne.n	800382e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3314      	adds	r3, #20
 8003868:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	613b      	str	r3, [r7, #16]
   return(result);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	63bb      	str	r3, [r7, #56]	; 0x38
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3314      	adds	r3, #20
 8003880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003882:	623a      	str	r2, [r7, #32]
 8003884:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	69f9      	ldr	r1, [r7, #28]
 8003888:	6a3a      	ldr	r2, [r7, #32]
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1e5      	bne.n	8003862 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e00f      	b.n	80038d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	4013      	ands	r3, r2
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	429a      	cmp	r2, r3
 80038c0:	bf0c      	ite	eq
 80038c2:	2301      	moveq	r3, #1
 80038c4:	2300      	movne	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d09f      	beq.n	8003810 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3740      	adds	r7, #64	; 0x40
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e0:	b0c0      	sub	sp, #256	; 0x100
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f8:	68d9      	ldr	r1, [r3, #12]
 80038fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	ea40 0301 	orr.w	r3, r0, r1
 8003904:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	431a      	orrs	r2, r3
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	431a      	orrs	r2, r3
 800391c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003934:	f021 010c 	bic.w	r1, r1, #12
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003942:	430b      	orrs	r3, r1
 8003944:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003956:	6999      	ldr	r1, [r3, #24]
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	ea40 0301 	orr.w	r3, r0, r1
 8003962:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4b8f      	ldr	r3, [pc, #572]	; (8003ba8 <UART_SetConfig+0x2cc>)
 800396c:	429a      	cmp	r2, r3
 800396e:	d005      	beq.n	800397c <UART_SetConfig+0xa0>
 8003970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	4b8d      	ldr	r3, [pc, #564]	; (8003bac <UART_SetConfig+0x2d0>)
 8003978:	429a      	cmp	r2, r3
 800397a:	d104      	bne.n	8003986 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800397c:	f7ff fe4c 	bl	8003618 <HAL_RCC_GetPCLK2Freq>
 8003980:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003984:	e003      	b.n	800398e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003986:	f7ff fe33 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 800398a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800398e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003998:	f040 810c 	bne.w	8003bb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800399c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039a0:	2200      	movs	r2, #0
 80039a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039ae:	4622      	mov	r2, r4
 80039b0:	462b      	mov	r3, r5
 80039b2:	1891      	adds	r1, r2, r2
 80039b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80039b6:	415b      	adcs	r3, r3
 80039b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039be:	4621      	mov	r1, r4
 80039c0:	eb12 0801 	adds.w	r8, r2, r1
 80039c4:	4629      	mov	r1, r5
 80039c6:	eb43 0901 	adc.w	r9, r3, r1
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039de:	4690      	mov	r8, r2
 80039e0:	4699      	mov	r9, r3
 80039e2:	4623      	mov	r3, r4
 80039e4:	eb18 0303 	adds.w	r3, r8, r3
 80039e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039ec:	462b      	mov	r3, r5
 80039ee:	eb49 0303 	adc.w	r3, r9, r3
 80039f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	18db      	adds	r3, r3, r3
 8003a0e:	653b      	str	r3, [r7, #80]	; 0x50
 8003a10:	4613      	mov	r3, r2
 8003a12:	eb42 0303 	adc.w	r3, r2, r3
 8003a16:	657b      	str	r3, [r7, #84]	; 0x54
 8003a18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a20:	f7fd f854 	bl	8000acc <__aeabi_uldivmod>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4b61      	ldr	r3, [pc, #388]	; (8003bb0 <UART_SetConfig+0x2d4>)
 8003a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	011c      	lsls	r4, r3, #4
 8003a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a44:	4642      	mov	r2, r8
 8003a46:	464b      	mov	r3, r9
 8003a48:	1891      	adds	r1, r2, r2
 8003a4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a4c:	415b      	adcs	r3, r3
 8003a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a54:	4641      	mov	r1, r8
 8003a56:	eb12 0a01 	adds.w	sl, r2, r1
 8003a5a:	4649      	mov	r1, r9
 8003a5c:	eb43 0b01 	adc.w	fp, r3, r1
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a74:	4692      	mov	sl, r2
 8003a76:	469b      	mov	fp, r3
 8003a78:	4643      	mov	r3, r8
 8003a7a:	eb1a 0303 	adds.w	r3, sl, r3
 8003a7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a82:	464b      	mov	r3, r9
 8003a84:	eb4b 0303 	adc.w	r3, fp, r3
 8003a88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	18db      	adds	r3, r3, r3
 8003aa4:	643b      	str	r3, [r7, #64]	; 0x40
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	eb42 0303 	adc.w	r3, r2, r3
 8003aac:	647b      	str	r3, [r7, #68]	; 0x44
 8003aae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ab2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ab6:	f7fd f809 	bl	8000acc <__aeabi_uldivmod>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4b3b      	ldr	r3, [pc, #236]	; (8003bb0 <UART_SetConfig+0x2d4>)
 8003ac2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	2264      	movs	r2, #100	; 0x64
 8003aca:	fb02 f303 	mul.w	r3, r2, r3
 8003ace:	1acb      	subs	r3, r1, r3
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ad6:	4b36      	ldr	r3, [pc, #216]	; (8003bb0 <UART_SetConfig+0x2d4>)
 8003ad8:	fba3 2302 	umull	r2, r3, r3, r2
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ae4:	441c      	add	r4, r3
 8003ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aea:	2200      	movs	r2, #0
 8003aec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003af0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003af4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003af8:	4642      	mov	r2, r8
 8003afa:	464b      	mov	r3, r9
 8003afc:	1891      	adds	r1, r2, r2
 8003afe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b00:	415b      	adcs	r3, r3
 8003b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b08:	4641      	mov	r1, r8
 8003b0a:	1851      	adds	r1, r2, r1
 8003b0c:	6339      	str	r1, [r7, #48]	; 0x30
 8003b0e:	4649      	mov	r1, r9
 8003b10:	414b      	adcs	r3, r1
 8003b12:	637b      	str	r3, [r7, #52]	; 0x34
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b20:	4659      	mov	r1, fp
 8003b22:	00cb      	lsls	r3, r1, #3
 8003b24:	4651      	mov	r1, sl
 8003b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b2a:	4651      	mov	r1, sl
 8003b2c:	00ca      	lsls	r2, r1, #3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	4619      	mov	r1, r3
 8003b32:	4603      	mov	r3, r0
 8003b34:	4642      	mov	r2, r8
 8003b36:	189b      	adds	r3, r3, r2
 8003b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b3c:	464b      	mov	r3, r9
 8003b3e:	460a      	mov	r2, r1
 8003b40:	eb42 0303 	adc.w	r3, r2, r3
 8003b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	18db      	adds	r3, r3, r3
 8003b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b62:	4613      	mov	r3, r2
 8003b64:	eb42 0303 	adc.w	r3, r2, r3
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b72:	f7fc ffab 	bl	8000acc <__aeabi_uldivmod>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <UART_SetConfig+0x2d4>)
 8003b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	2164      	movs	r1, #100	; 0x64
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	3332      	adds	r3, #50	; 0x32
 8003b8e:	4a08      	ldr	r2, [pc, #32]	; (8003bb0 <UART_SetConfig+0x2d4>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	f003 0207 	and.w	r2, r3, #7
 8003b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4422      	add	r2, r4
 8003ba2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ba4:	e105      	b.n	8003db2 <UART_SetConfig+0x4d6>
 8003ba6:	bf00      	nop
 8003ba8:	40011000 	.word	0x40011000
 8003bac:	40011400 	.word	0x40011400
 8003bb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bc6:	4642      	mov	r2, r8
 8003bc8:	464b      	mov	r3, r9
 8003bca:	1891      	adds	r1, r2, r2
 8003bcc:	6239      	str	r1, [r7, #32]
 8003bce:	415b      	adcs	r3, r3
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bd6:	4641      	mov	r1, r8
 8003bd8:	1854      	adds	r4, r2, r1
 8003bda:	4649      	mov	r1, r9
 8003bdc:	eb43 0501 	adc.w	r5, r3, r1
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	00eb      	lsls	r3, r5, #3
 8003bea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bee:	00e2      	lsls	r2, r4, #3
 8003bf0:	4614      	mov	r4, r2
 8003bf2:	461d      	mov	r5, r3
 8003bf4:	4643      	mov	r3, r8
 8003bf6:	18e3      	adds	r3, r4, r3
 8003bf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bfc:	464b      	mov	r3, r9
 8003bfe:	eb45 0303 	adc.w	r3, r5, r3
 8003c02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c22:	4629      	mov	r1, r5
 8003c24:	008b      	lsls	r3, r1, #2
 8003c26:	4621      	mov	r1, r4
 8003c28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	008a      	lsls	r2, r1, #2
 8003c30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c34:	f7fc ff4a 	bl	8000acc <__aeabi_uldivmod>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4b60      	ldr	r3, [pc, #384]	; (8003dc0 <UART_SetConfig+0x4e4>)
 8003c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	011c      	lsls	r4, r3, #4
 8003c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c58:	4642      	mov	r2, r8
 8003c5a:	464b      	mov	r3, r9
 8003c5c:	1891      	adds	r1, r2, r2
 8003c5e:	61b9      	str	r1, [r7, #24]
 8003c60:	415b      	adcs	r3, r3
 8003c62:	61fb      	str	r3, [r7, #28]
 8003c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c68:	4641      	mov	r1, r8
 8003c6a:	1851      	adds	r1, r2, r1
 8003c6c:	6139      	str	r1, [r7, #16]
 8003c6e:	4649      	mov	r1, r9
 8003c70:	414b      	adcs	r3, r1
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c80:	4659      	mov	r1, fp
 8003c82:	00cb      	lsls	r3, r1, #3
 8003c84:	4651      	mov	r1, sl
 8003c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c8a:	4651      	mov	r1, sl
 8003c8c:	00ca      	lsls	r2, r1, #3
 8003c8e:	4610      	mov	r0, r2
 8003c90:	4619      	mov	r1, r3
 8003c92:	4603      	mov	r3, r0
 8003c94:	4642      	mov	r2, r8
 8003c96:	189b      	adds	r3, r3, r2
 8003c98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c9c:	464b      	mov	r3, r9
 8003c9e:	460a      	mov	r2, r1
 8003ca0:	eb42 0303 	adc.w	r3, r2, r3
 8003ca4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003cc0:	4649      	mov	r1, r9
 8003cc2:	008b      	lsls	r3, r1, #2
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cca:	4641      	mov	r1, r8
 8003ccc:	008a      	lsls	r2, r1, #2
 8003cce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cd2:	f7fc fefb 	bl	8000acc <__aeabi_uldivmod>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4b39      	ldr	r3, [pc, #228]	; (8003dc0 <UART_SetConfig+0x4e4>)
 8003cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce0:	095b      	lsrs	r3, r3, #5
 8003ce2:	2164      	movs	r1, #100	; 0x64
 8003ce4:	fb01 f303 	mul.w	r3, r1, r3
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	3332      	adds	r3, #50	; 0x32
 8003cee:	4a34      	ldr	r2, [pc, #208]	; (8003dc0 <UART_SetConfig+0x4e4>)
 8003cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf4:	095b      	lsrs	r3, r3, #5
 8003cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cfa:	441c      	add	r4, r3
 8003cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d00:	2200      	movs	r2, #0
 8003d02:	673b      	str	r3, [r7, #112]	; 0x70
 8003d04:	677a      	str	r2, [r7, #116]	; 0x74
 8003d06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d0a:	4642      	mov	r2, r8
 8003d0c:	464b      	mov	r3, r9
 8003d0e:	1891      	adds	r1, r2, r2
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	415b      	adcs	r3, r3
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d1a:	4641      	mov	r1, r8
 8003d1c:	1851      	adds	r1, r2, r1
 8003d1e:	6039      	str	r1, [r7, #0]
 8003d20:	4649      	mov	r1, r9
 8003d22:	414b      	adcs	r3, r1
 8003d24:	607b      	str	r3, [r7, #4]
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d32:	4659      	mov	r1, fp
 8003d34:	00cb      	lsls	r3, r1, #3
 8003d36:	4651      	mov	r1, sl
 8003d38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d3c:	4651      	mov	r1, sl
 8003d3e:	00ca      	lsls	r2, r1, #3
 8003d40:	4610      	mov	r0, r2
 8003d42:	4619      	mov	r1, r3
 8003d44:	4603      	mov	r3, r0
 8003d46:	4642      	mov	r2, r8
 8003d48:	189b      	adds	r3, r3, r2
 8003d4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d4c:	464b      	mov	r3, r9
 8003d4e:	460a      	mov	r2, r1
 8003d50:	eb42 0303 	adc.w	r3, r2, r3
 8003d54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	663b      	str	r3, [r7, #96]	; 0x60
 8003d60:	667a      	str	r2, [r7, #100]	; 0x64
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d6e:	4649      	mov	r1, r9
 8003d70:	008b      	lsls	r3, r1, #2
 8003d72:	4641      	mov	r1, r8
 8003d74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d78:	4641      	mov	r1, r8
 8003d7a:	008a      	lsls	r2, r1, #2
 8003d7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d80:	f7fc fea4 	bl	8000acc <__aeabi_uldivmod>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <UART_SetConfig+0x4e4>)
 8003d8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d8e:	095b      	lsrs	r3, r3, #5
 8003d90:	2164      	movs	r1, #100	; 0x64
 8003d92:	fb01 f303 	mul.w	r3, r1, r3
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	3332      	adds	r3, #50	; 0x32
 8003d9c:	4a08      	ldr	r2, [pc, #32]	; (8003dc0 <UART_SetConfig+0x4e4>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	f003 020f 	and.w	r2, r3, #15
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4422      	add	r2, r4
 8003db0:	609a      	str	r2, [r3, #8]
}
 8003db2:	bf00      	nop
 8003db4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003db8:	46bd      	mov	sp, r7
 8003dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dbe:	bf00      	nop
 8003dc0:	51eb851f 	.word	0x51eb851f

08003dc4 <__errno>:
 8003dc4:	4b01      	ldr	r3, [pc, #4]	; (8003dcc <__errno+0x8>)
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	2000000c 	.word	0x2000000c

08003dd0 <__libc_init_array>:
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	4d0d      	ldr	r5, [pc, #52]	; (8003e08 <__libc_init_array+0x38>)
 8003dd4:	4c0d      	ldr	r4, [pc, #52]	; (8003e0c <__libc_init_array+0x3c>)
 8003dd6:	1b64      	subs	r4, r4, r5
 8003dd8:	10a4      	asrs	r4, r4, #2
 8003dda:	2600      	movs	r6, #0
 8003ddc:	42a6      	cmp	r6, r4
 8003dde:	d109      	bne.n	8003df4 <__libc_init_array+0x24>
 8003de0:	4d0b      	ldr	r5, [pc, #44]	; (8003e10 <__libc_init_array+0x40>)
 8003de2:	4c0c      	ldr	r4, [pc, #48]	; (8003e14 <__libc_init_array+0x44>)
 8003de4:	f000 fc8e 	bl	8004704 <_init>
 8003de8:	1b64      	subs	r4, r4, r5
 8003dea:	10a4      	asrs	r4, r4, #2
 8003dec:	2600      	movs	r6, #0
 8003dee:	42a6      	cmp	r6, r4
 8003df0:	d105      	bne.n	8003dfe <__libc_init_array+0x2e>
 8003df2:	bd70      	pop	{r4, r5, r6, pc}
 8003df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df8:	4798      	blx	r3
 8003dfa:	3601      	adds	r6, #1
 8003dfc:	e7ee      	b.n	8003ddc <__libc_init_array+0xc>
 8003dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e02:	4798      	blx	r3
 8003e04:	3601      	adds	r6, #1
 8003e06:	e7f2      	b.n	8003dee <__libc_init_array+0x1e>
 8003e08:	08004788 	.word	0x08004788
 8003e0c:	08004788 	.word	0x08004788
 8003e10:	08004788 	.word	0x08004788
 8003e14:	0800478c 	.word	0x0800478c

08003e18 <memset>:
 8003e18:	4402      	add	r2, r0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d100      	bne.n	8003e22 <memset+0xa>
 8003e20:	4770      	bx	lr
 8003e22:	f803 1b01 	strb.w	r1, [r3], #1
 8003e26:	e7f9      	b.n	8003e1c <memset+0x4>

08003e28 <siprintf>:
 8003e28:	b40e      	push	{r1, r2, r3}
 8003e2a:	b500      	push	{lr}
 8003e2c:	b09c      	sub	sp, #112	; 0x70
 8003e2e:	ab1d      	add	r3, sp, #116	; 0x74
 8003e30:	9002      	str	r0, [sp, #8]
 8003e32:	9006      	str	r0, [sp, #24]
 8003e34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e38:	4809      	ldr	r0, [pc, #36]	; (8003e60 <siprintf+0x38>)
 8003e3a:	9107      	str	r1, [sp, #28]
 8003e3c:	9104      	str	r1, [sp, #16]
 8003e3e:	4909      	ldr	r1, [pc, #36]	; (8003e64 <siprintf+0x3c>)
 8003e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e44:	9105      	str	r1, [sp, #20]
 8003e46:	6800      	ldr	r0, [r0, #0]
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	a902      	add	r1, sp, #8
 8003e4c:	f000 f868 	bl	8003f20 <_svfiprintf_r>
 8003e50:	9b02      	ldr	r3, [sp, #8]
 8003e52:	2200      	movs	r2, #0
 8003e54:	701a      	strb	r2, [r3, #0]
 8003e56:	b01c      	add	sp, #112	; 0x70
 8003e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e5c:	b003      	add	sp, #12
 8003e5e:	4770      	bx	lr
 8003e60:	2000000c 	.word	0x2000000c
 8003e64:	ffff0208 	.word	0xffff0208

08003e68 <__ssputs_r>:
 8003e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e6c:	688e      	ldr	r6, [r1, #8]
 8003e6e:	429e      	cmp	r6, r3
 8003e70:	4682      	mov	sl, r0
 8003e72:	460c      	mov	r4, r1
 8003e74:	4690      	mov	r8, r2
 8003e76:	461f      	mov	r7, r3
 8003e78:	d838      	bhi.n	8003eec <__ssputs_r+0x84>
 8003e7a:	898a      	ldrh	r2, [r1, #12]
 8003e7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e80:	d032      	beq.n	8003ee8 <__ssputs_r+0x80>
 8003e82:	6825      	ldr	r5, [r4, #0]
 8003e84:	6909      	ldr	r1, [r1, #16]
 8003e86:	eba5 0901 	sub.w	r9, r5, r1
 8003e8a:	6965      	ldr	r5, [r4, #20]
 8003e8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e94:	3301      	adds	r3, #1
 8003e96:	444b      	add	r3, r9
 8003e98:	106d      	asrs	r5, r5, #1
 8003e9a:	429d      	cmp	r5, r3
 8003e9c:	bf38      	it	cc
 8003e9e:	461d      	movcc	r5, r3
 8003ea0:	0553      	lsls	r3, r2, #21
 8003ea2:	d531      	bpl.n	8003f08 <__ssputs_r+0xa0>
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	f000 fb63 	bl	8004570 <_malloc_r>
 8003eaa:	4606      	mov	r6, r0
 8003eac:	b950      	cbnz	r0, 8003ec4 <__ssputs_r+0x5c>
 8003eae:	230c      	movs	r3, #12
 8003eb0:	f8ca 3000 	str.w	r3, [sl]
 8003eb4:	89a3      	ldrh	r3, [r4, #12]
 8003eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eba:	81a3      	strh	r3, [r4, #12]
 8003ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ec4:	6921      	ldr	r1, [r4, #16]
 8003ec6:	464a      	mov	r2, r9
 8003ec8:	f000 fabe 	bl	8004448 <memcpy>
 8003ecc:	89a3      	ldrh	r3, [r4, #12]
 8003ece:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed6:	81a3      	strh	r3, [r4, #12]
 8003ed8:	6126      	str	r6, [r4, #16]
 8003eda:	6165      	str	r5, [r4, #20]
 8003edc:	444e      	add	r6, r9
 8003ede:	eba5 0509 	sub.w	r5, r5, r9
 8003ee2:	6026      	str	r6, [r4, #0]
 8003ee4:	60a5      	str	r5, [r4, #8]
 8003ee6:	463e      	mov	r6, r7
 8003ee8:	42be      	cmp	r6, r7
 8003eea:	d900      	bls.n	8003eee <__ssputs_r+0x86>
 8003eec:	463e      	mov	r6, r7
 8003eee:	6820      	ldr	r0, [r4, #0]
 8003ef0:	4632      	mov	r2, r6
 8003ef2:	4641      	mov	r1, r8
 8003ef4:	f000 fab6 	bl	8004464 <memmove>
 8003ef8:	68a3      	ldr	r3, [r4, #8]
 8003efa:	1b9b      	subs	r3, r3, r6
 8003efc:	60a3      	str	r3, [r4, #8]
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	4433      	add	r3, r6
 8003f02:	6023      	str	r3, [r4, #0]
 8003f04:	2000      	movs	r0, #0
 8003f06:	e7db      	b.n	8003ec0 <__ssputs_r+0x58>
 8003f08:	462a      	mov	r2, r5
 8003f0a:	f000 fba5 	bl	8004658 <_realloc_r>
 8003f0e:	4606      	mov	r6, r0
 8003f10:	2800      	cmp	r0, #0
 8003f12:	d1e1      	bne.n	8003ed8 <__ssputs_r+0x70>
 8003f14:	6921      	ldr	r1, [r4, #16]
 8003f16:	4650      	mov	r0, sl
 8003f18:	f000 fabe 	bl	8004498 <_free_r>
 8003f1c:	e7c7      	b.n	8003eae <__ssputs_r+0x46>
	...

08003f20 <_svfiprintf_r>:
 8003f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f24:	4698      	mov	r8, r3
 8003f26:	898b      	ldrh	r3, [r1, #12]
 8003f28:	061b      	lsls	r3, r3, #24
 8003f2a:	b09d      	sub	sp, #116	; 0x74
 8003f2c:	4607      	mov	r7, r0
 8003f2e:	460d      	mov	r5, r1
 8003f30:	4614      	mov	r4, r2
 8003f32:	d50e      	bpl.n	8003f52 <_svfiprintf_r+0x32>
 8003f34:	690b      	ldr	r3, [r1, #16]
 8003f36:	b963      	cbnz	r3, 8003f52 <_svfiprintf_r+0x32>
 8003f38:	2140      	movs	r1, #64	; 0x40
 8003f3a:	f000 fb19 	bl	8004570 <_malloc_r>
 8003f3e:	6028      	str	r0, [r5, #0]
 8003f40:	6128      	str	r0, [r5, #16]
 8003f42:	b920      	cbnz	r0, 8003f4e <_svfiprintf_r+0x2e>
 8003f44:	230c      	movs	r3, #12
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	f04f 30ff 	mov.w	r0, #4294967295
 8003f4c:	e0d1      	b.n	80040f2 <_svfiprintf_r+0x1d2>
 8003f4e:	2340      	movs	r3, #64	; 0x40
 8003f50:	616b      	str	r3, [r5, #20]
 8003f52:	2300      	movs	r3, #0
 8003f54:	9309      	str	r3, [sp, #36]	; 0x24
 8003f56:	2320      	movs	r3, #32
 8003f58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f60:	2330      	movs	r3, #48	; 0x30
 8003f62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800410c <_svfiprintf_r+0x1ec>
 8003f66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f6a:	f04f 0901 	mov.w	r9, #1
 8003f6e:	4623      	mov	r3, r4
 8003f70:	469a      	mov	sl, r3
 8003f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f76:	b10a      	cbz	r2, 8003f7c <_svfiprintf_r+0x5c>
 8003f78:	2a25      	cmp	r2, #37	; 0x25
 8003f7a:	d1f9      	bne.n	8003f70 <_svfiprintf_r+0x50>
 8003f7c:	ebba 0b04 	subs.w	fp, sl, r4
 8003f80:	d00b      	beq.n	8003f9a <_svfiprintf_r+0x7a>
 8003f82:	465b      	mov	r3, fp
 8003f84:	4622      	mov	r2, r4
 8003f86:	4629      	mov	r1, r5
 8003f88:	4638      	mov	r0, r7
 8003f8a:	f7ff ff6d 	bl	8003e68 <__ssputs_r>
 8003f8e:	3001      	adds	r0, #1
 8003f90:	f000 80aa 	beq.w	80040e8 <_svfiprintf_r+0x1c8>
 8003f94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f96:	445a      	add	r2, fp
 8003f98:	9209      	str	r2, [sp, #36]	; 0x24
 8003f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80a2 	beq.w	80040e8 <_svfiprintf_r+0x1c8>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8003faa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fae:	f10a 0a01 	add.w	sl, sl, #1
 8003fb2:	9304      	str	r3, [sp, #16]
 8003fb4:	9307      	str	r3, [sp, #28]
 8003fb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fba:	931a      	str	r3, [sp, #104]	; 0x68
 8003fbc:	4654      	mov	r4, sl
 8003fbe:	2205      	movs	r2, #5
 8003fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fc4:	4851      	ldr	r0, [pc, #324]	; (800410c <_svfiprintf_r+0x1ec>)
 8003fc6:	f7fc f913 	bl	80001f0 <memchr>
 8003fca:	9a04      	ldr	r2, [sp, #16]
 8003fcc:	b9d8      	cbnz	r0, 8004006 <_svfiprintf_r+0xe6>
 8003fce:	06d0      	lsls	r0, r2, #27
 8003fd0:	bf44      	itt	mi
 8003fd2:	2320      	movmi	r3, #32
 8003fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fd8:	0711      	lsls	r1, r2, #28
 8003fda:	bf44      	itt	mi
 8003fdc:	232b      	movmi	r3, #43	; 0x2b
 8003fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8003fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8003fe8:	d015      	beq.n	8004016 <_svfiprintf_r+0xf6>
 8003fea:	9a07      	ldr	r2, [sp, #28]
 8003fec:	4654      	mov	r4, sl
 8003fee:	2000      	movs	r0, #0
 8003ff0:	f04f 0c0a 	mov.w	ip, #10
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ffa:	3b30      	subs	r3, #48	; 0x30
 8003ffc:	2b09      	cmp	r3, #9
 8003ffe:	d94e      	bls.n	800409e <_svfiprintf_r+0x17e>
 8004000:	b1b0      	cbz	r0, 8004030 <_svfiprintf_r+0x110>
 8004002:	9207      	str	r2, [sp, #28]
 8004004:	e014      	b.n	8004030 <_svfiprintf_r+0x110>
 8004006:	eba0 0308 	sub.w	r3, r0, r8
 800400a:	fa09 f303 	lsl.w	r3, r9, r3
 800400e:	4313      	orrs	r3, r2
 8004010:	9304      	str	r3, [sp, #16]
 8004012:	46a2      	mov	sl, r4
 8004014:	e7d2      	b.n	8003fbc <_svfiprintf_r+0x9c>
 8004016:	9b03      	ldr	r3, [sp, #12]
 8004018:	1d19      	adds	r1, r3, #4
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	9103      	str	r1, [sp, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	bfbb      	ittet	lt
 8004022:	425b      	neglt	r3, r3
 8004024:	f042 0202 	orrlt.w	r2, r2, #2
 8004028:	9307      	strge	r3, [sp, #28]
 800402a:	9307      	strlt	r3, [sp, #28]
 800402c:	bfb8      	it	lt
 800402e:	9204      	strlt	r2, [sp, #16]
 8004030:	7823      	ldrb	r3, [r4, #0]
 8004032:	2b2e      	cmp	r3, #46	; 0x2e
 8004034:	d10c      	bne.n	8004050 <_svfiprintf_r+0x130>
 8004036:	7863      	ldrb	r3, [r4, #1]
 8004038:	2b2a      	cmp	r3, #42	; 0x2a
 800403a:	d135      	bne.n	80040a8 <_svfiprintf_r+0x188>
 800403c:	9b03      	ldr	r3, [sp, #12]
 800403e:	1d1a      	adds	r2, r3, #4
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	9203      	str	r2, [sp, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	bfb8      	it	lt
 8004048:	f04f 33ff 	movlt.w	r3, #4294967295
 800404c:	3402      	adds	r4, #2
 800404e:	9305      	str	r3, [sp, #20]
 8004050:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800411c <_svfiprintf_r+0x1fc>
 8004054:	7821      	ldrb	r1, [r4, #0]
 8004056:	2203      	movs	r2, #3
 8004058:	4650      	mov	r0, sl
 800405a:	f7fc f8c9 	bl	80001f0 <memchr>
 800405e:	b140      	cbz	r0, 8004072 <_svfiprintf_r+0x152>
 8004060:	2340      	movs	r3, #64	; 0x40
 8004062:	eba0 000a 	sub.w	r0, r0, sl
 8004066:	fa03 f000 	lsl.w	r0, r3, r0
 800406a:	9b04      	ldr	r3, [sp, #16]
 800406c:	4303      	orrs	r3, r0
 800406e:	3401      	adds	r4, #1
 8004070:	9304      	str	r3, [sp, #16]
 8004072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004076:	4826      	ldr	r0, [pc, #152]	; (8004110 <_svfiprintf_r+0x1f0>)
 8004078:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800407c:	2206      	movs	r2, #6
 800407e:	f7fc f8b7 	bl	80001f0 <memchr>
 8004082:	2800      	cmp	r0, #0
 8004084:	d038      	beq.n	80040f8 <_svfiprintf_r+0x1d8>
 8004086:	4b23      	ldr	r3, [pc, #140]	; (8004114 <_svfiprintf_r+0x1f4>)
 8004088:	bb1b      	cbnz	r3, 80040d2 <_svfiprintf_r+0x1b2>
 800408a:	9b03      	ldr	r3, [sp, #12]
 800408c:	3307      	adds	r3, #7
 800408e:	f023 0307 	bic.w	r3, r3, #7
 8004092:	3308      	adds	r3, #8
 8004094:	9303      	str	r3, [sp, #12]
 8004096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004098:	4433      	add	r3, r6
 800409a:	9309      	str	r3, [sp, #36]	; 0x24
 800409c:	e767      	b.n	8003f6e <_svfiprintf_r+0x4e>
 800409e:	fb0c 3202 	mla	r2, ip, r2, r3
 80040a2:	460c      	mov	r4, r1
 80040a4:	2001      	movs	r0, #1
 80040a6:	e7a5      	b.n	8003ff4 <_svfiprintf_r+0xd4>
 80040a8:	2300      	movs	r3, #0
 80040aa:	3401      	adds	r4, #1
 80040ac:	9305      	str	r3, [sp, #20]
 80040ae:	4619      	mov	r1, r3
 80040b0:	f04f 0c0a 	mov.w	ip, #10
 80040b4:	4620      	mov	r0, r4
 80040b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040ba:	3a30      	subs	r2, #48	; 0x30
 80040bc:	2a09      	cmp	r2, #9
 80040be:	d903      	bls.n	80040c8 <_svfiprintf_r+0x1a8>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0c5      	beq.n	8004050 <_svfiprintf_r+0x130>
 80040c4:	9105      	str	r1, [sp, #20]
 80040c6:	e7c3      	b.n	8004050 <_svfiprintf_r+0x130>
 80040c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80040cc:	4604      	mov	r4, r0
 80040ce:	2301      	movs	r3, #1
 80040d0:	e7f0      	b.n	80040b4 <_svfiprintf_r+0x194>
 80040d2:	ab03      	add	r3, sp, #12
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	462a      	mov	r2, r5
 80040d8:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <_svfiprintf_r+0x1f8>)
 80040da:	a904      	add	r1, sp, #16
 80040dc:	4638      	mov	r0, r7
 80040de:	f3af 8000 	nop.w
 80040e2:	1c42      	adds	r2, r0, #1
 80040e4:	4606      	mov	r6, r0
 80040e6:	d1d6      	bne.n	8004096 <_svfiprintf_r+0x176>
 80040e8:	89ab      	ldrh	r3, [r5, #12]
 80040ea:	065b      	lsls	r3, r3, #25
 80040ec:	f53f af2c 	bmi.w	8003f48 <_svfiprintf_r+0x28>
 80040f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040f2:	b01d      	add	sp, #116	; 0x74
 80040f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f8:	ab03      	add	r3, sp, #12
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	462a      	mov	r2, r5
 80040fe:	4b06      	ldr	r3, [pc, #24]	; (8004118 <_svfiprintf_r+0x1f8>)
 8004100:	a904      	add	r1, sp, #16
 8004102:	4638      	mov	r0, r7
 8004104:	f000 f87a 	bl	80041fc <_printf_i>
 8004108:	e7eb      	b.n	80040e2 <_svfiprintf_r+0x1c2>
 800410a:	bf00      	nop
 800410c:	0800474c 	.word	0x0800474c
 8004110:	08004756 	.word	0x08004756
 8004114:	00000000 	.word	0x00000000
 8004118:	08003e69 	.word	0x08003e69
 800411c:	08004752 	.word	0x08004752

08004120 <_printf_common>:
 8004120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004124:	4616      	mov	r6, r2
 8004126:	4699      	mov	r9, r3
 8004128:	688a      	ldr	r2, [r1, #8]
 800412a:	690b      	ldr	r3, [r1, #16]
 800412c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004130:	4293      	cmp	r3, r2
 8004132:	bfb8      	it	lt
 8004134:	4613      	movlt	r3, r2
 8004136:	6033      	str	r3, [r6, #0]
 8004138:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800413c:	4607      	mov	r7, r0
 800413e:	460c      	mov	r4, r1
 8004140:	b10a      	cbz	r2, 8004146 <_printf_common+0x26>
 8004142:	3301      	adds	r3, #1
 8004144:	6033      	str	r3, [r6, #0]
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	0699      	lsls	r1, r3, #26
 800414a:	bf42      	ittt	mi
 800414c:	6833      	ldrmi	r3, [r6, #0]
 800414e:	3302      	addmi	r3, #2
 8004150:	6033      	strmi	r3, [r6, #0]
 8004152:	6825      	ldr	r5, [r4, #0]
 8004154:	f015 0506 	ands.w	r5, r5, #6
 8004158:	d106      	bne.n	8004168 <_printf_common+0x48>
 800415a:	f104 0a19 	add.w	sl, r4, #25
 800415e:	68e3      	ldr	r3, [r4, #12]
 8004160:	6832      	ldr	r2, [r6, #0]
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	42ab      	cmp	r3, r5
 8004166:	dc26      	bgt.n	80041b6 <_printf_common+0x96>
 8004168:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800416c:	1e13      	subs	r3, r2, #0
 800416e:	6822      	ldr	r2, [r4, #0]
 8004170:	bf18      	it	ne
 8004172:	2301      	movne	r3, #1
 8004174:	0692      	lsls	r2, r2, #26
 8004176:	d42b      	bmi.n	80041d0 <_printf_common+0xb0>
 8004178:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800417c:	4649      	mov	r1, r9
 800417e:	4638      	mov	r0, r7
 8004180:	47c0      	blx	r8
 8004182:	3001      	adds	r0, #1
 8004184:	d01e      	beq.n	80041c4 <_printf_common+0xa4>
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	68e5      	ldr	r5, [r4, #12]
 800418a:	6832      	ldr	r2, [r6, #0]
 800418c:	f003 0306 	and.w	r3, r3, #6
 8004190:	2b04      	cmp	r3, #4
 8004192:	bf08      	it	eq
 8004194:	1aad      	subeq	r5, r5, r2
 8004196:	68a3      	ldr	r3, [r4, #8]
 8004198:	6922      	ldr	r2, [r4, #16]
 800419a:	bf0c      	ite	eq
 800419c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041a0:	2500      	movne	r5, #0
 80041a2:	4293      	cmp	r3, r2
 80041a4:	bfc4      	itt	gt
 80041a6:	1a9b      	subgt	r3, r3, r2
 80041a8:	18ed      	addgt	r5, r5, r3
 80041aa:	2600      	movs	r6, #0
 80041ac:	341a      	adds	r4, #26
 80041ae:	42b5      	cmp	r5, r6
 80041b0:	d11a      	bne.n	80041e8 <_printf_common+0xc8>
 80041b2:	2000      	movs	r0, #0
 80041b4:	e008      	b.n	80041c8 <_printf_common+0xa8>
 80041b6:	2301      	movs	r3, #1
 80041b8:	4652      	mov	r2, sl
 80041ba:	4649      	mov	r1, r9
 80041bc:	4638      	mov	r0, r7
 80041be:	47c0      	blx	r8
 80041c0:	3001      	adds	r0, #1
 80041c2:	d103      	bne.n	80041cc <_printf_common+0xac>
 80041c4:	f04f 30ff 	mov.w	r0, #4294967295
 80041c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041cc:	3501      	adds	r5, #1
 80041ce:	e7c6      	b.n	800415e <_printf_common+0x3e>
 80041d0:	18e1      	adds	r1, r4, r3
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	2030      	movs	r0, #48	; 0x30
 80041d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041da:	4422      	add	r2, r4
 80041dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041e4:	3302      	adds	r3, #2
 80041e6:	e7c7      	b.n	8004178 <_printf_common+0x58>
 80041e8:	2301      	movs	r3, #1
 80041ea:	4622      	mov	r2, r4
 80041ec:	4649      	mov	r1, r9
 80041ee:	4638      	mov	r0, r7
 80041f0:	47c0      	blx	r8
 80041f2:	3001      	adds	r0, #1
 80041f4:	d0e6      	beq.n	80041c4 <_printf_common+0xa4>
 80041f6:	3601      	adds	r6, #1
 80041f8:	e7d9      	b.n	80041ae <_printf_common+0x8e>
	...

080041fc <_printf_i>:
 80041fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004200:	7e0f      	ldrb	r7, [r1, #24]
 8004202:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004204:	2f78      	cmp	r7, #120	; 0x78
 8004206:	4691      	mov	r9, r2
 8004208:	4680      	mov	r8, r0
 800420a:	460c      	mov	r4, r1
 800420c:	469a      	mov	sl, r3
 800420e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004212:	d807      	bhi.n	8004224 <_printf_i+0x28>
 8004214:	2f62      	cmp	r7, #98	; 0x62
 8004216:	d80a      	bhi.n	800422e <_printf_i+0x32>
 8004218:	2f00      	cmp	r7, #0
 800421a:	f000 80d8 	beq.w	80043ce <_printf_i+0x1d2>
 800421e:	2f58      	cmp	r7, #88	; 0x58
 8004220:	f000 80a3 	beq.w	800436a <_printf_i+0x16e>
 8004224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004228:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800422c:	e03a      	b.n	80042a4 <_printf_i+0xa8>
 800422e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004232:	2b15      	cmp	r3, #21
 8004234:	d8f6      	bhi.n	8004224 <_printf_i+0x28>
 8004236:	a101      	add	r1, pc, #4	; (adr r1, 800423c <_printf_i+0x40>)
 8004238:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800423c:	08004295 	.word	0x08004295
 8004240:	080042a9 	.word	0x080042a9
 8004244:	08004225 	.word	0x08004225
 8004248:	08004225 	.word	0x08004225
 800424c:	08004225 	.word	0x08004225
 8004250:	08004225 	.word	0x08004225
 8004254:	080042a9 	.word	0x080042a9
 8004258:	08004225 	.word	0x08004225
 800425c:	08004225 	.word	0x08004225
 8004260:	08004225 	.word	0x08004225
 8004264:	08004225 	.word	0x08004225
 8004268:	080043b5 	.word	0x080043b5
 800426c:	080042d9 	.word	0x080042d9
 8004270:	08004397 	.word	0x08004397
 8004274:	08004225 	.word	0x08004225
 8004278:	08004225 	.word	0x08004225
 800427c:	080043d7 	.word	0x080043d7
 8004280:	08004225 	.word	0x08004225
 8004284:	080042d9 	.word	0x080042d9
 8004288:	08004225 	.word	0x08004225
 800428c:	08004225 	.word	0x08004225
 8004290:	0800439f 	.word	0x0800439f
 8004294:	682b      	ldr	r3, [r5, #0]
 8004296:	1d1a      	adds	r2, r3, #4
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	602a      	str	r2, [r5, #0]
 800429c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0a3      	b.n	80043f0 <_printf_i+0x1f4>
 80042a8:	6820      	ldr	r0, [r4, #0]
 80042aa:	6829      	ldr	r1, [r5, #0]
 80042ac:	0606      	lsls	r6, r0, #24
 80042ae:	f101 0304 	add.w	r3, r1, #4
 80042b2:	d50a      	bpl.n	80042ca <_printf_i+0xce>
 80042b4:	680e      	ldr	r6, [r1, #0]
 80042b6:	602b      	str	r3, [r5, #0]
 80042b8:	2e00      	cmp	r6, #0
 80042ba:	da03      	bge.n	80042c4 <_printf_i+0xc8>
 80042bc:	232d      	movs	r3, #45	; 0x2d
 80042be:	4276      	negs	r6, r6
 80042c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042c4:	485e      	ldr	r0, [pc, #376]	; (8004440 <_printf_i+0x244>)
 80042c6:	230a      	movs	r3, #10
 80042c8:	e019      	b.n	80042fe <_printf_i+0x102>
 80042ca:	680e      	ldr	r6, [r1, #0]
 80042cc:	602b      	str	r3, [r5, #0]
 80042ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042d2:	bf18      	it	ne
 80042d4:	b236      	sxthne	r6, r6
 80042d6:	e7ef      	b.n	80042b8 <_printf_i+0xbc>
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	6820      	ldr	r0, [r4, #0]
 80042dc:	1d19      	adds	r1, r3, #4
 80042de:	6029      	str	r1, [r5, #0]
 80042e0:	0601      	lsls	r1, r0, #24
 80042e2:	d501      	bpl.n	80042e8 <_printf_i+0xec>
 80042e4:	681e      	ldr	r6, [r3, #0]
 80042e6:	e002      	b.n	80042ee <_printf_i+0xf2>
 80042e8:	0646      	lsls	r6, r0, #25
 80042ea:	d5fb      	bpl.n	80042e4 <_printf_i+0xe8>
 80042ec:	881e      	ldrh	r6, [r3, #0]
 80042ee:	4854      	ldr	r0, [pc, #336]	; (8004440 <_printf_i+0x244>)
 80042f0:	2f6f      	cmp	r7, #111	; 0x6f
 80042f2:	bf0c      	ite	eq
 80042f4:	2308      	moveq	r3, #8
 80042f6:	230a      	movne	r3, #10
 80042f8:	2100      	movs	r1, #0
 80042fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042fe:	6865      	ldr	r5, [r4, #4]
 8004300:	60a5      	str	r5, [r4, #8]
 8004302:	2d00      	cmp	r5, #0
 8004304:	bfa2      	ittt	ge
 8004306:	6821      	ldrge	r1, [r4, #0]
 8004308:	f021 0104 	bicge.w	r1, r1, #4
 800430c:	6021      	strge	r1, [r4, #0]
 800430e:	b90e      	cbnz	r6, 8004314 <_printf_i+0x118>
 8004310:	2d00      	cmp	r5, #0
 8004312:	d04d      	beq.n	80043b0 <_printf_i+0x1b4>
 8004314:	4615      	mov	r5, r2
 8004316:	fbb6 f1f3 	udiv	r1, r6, r3
 800431a:	fb03 6711 	mls	r7, r3, r1, r6
 800431e:	5dc7      	ldrb	r7, [r0, r7]
 8004320:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004324:	4637      	mov	r7, r6
 8004326:	42bb      	cmp	r3, r7
 8004328:	460e      	mov	r6, r1
 800432a:	d9f4      	bls.n	8004316 <_printf_i+0x11a>
 800432c:	2b08      	cmp	r3, #8
 800432e:	d10b      	bne.n	8004348 <_printf_i+0x14c>
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	07de      	lsls	r6, r3, #31
 8004334:	d508      	bpl.n	8004348 <_printf_i+0x14c>
 8004336:	6923      	ldr	r3, [r4, #16]
 8004338:	6861      	ldr	r1, [r4, #4]
 800433a:	4299      	cmp	r1, r3
 800433c:	bfde      	ittt	le
 800433e:	2330      	movle	r3, #48	; 0x30
 8004340:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004344:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004348:	1b52      	subs	r2, r2, r5
 800434a:	6122      	str	r2, [r4, #16]
 800434c:	f8cd a000 	str.w	sl, [sp]
 8004350:	464b      	mov	r3, r9
 8004352:	aa03      	add	r2, sp, #12
 8004354:	4621      	mov	r1, r4
 8004356:	4640      	mov	r0, r8
 8004358:	f7ff fee2 	bl	8004120 <_printf_common>
 800435c:	3001      	adds	r0, #1
 800435e:	d14c      	bne.n	80043fa <_printf_i+0x1fe>
 8004360:	f04f 30ff 	mov.w	r0, #4294967295
 8004364:	b004      	add	sp, #16
 8004366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800436a:	4835      	ldr	r0, [pc, #212]	; (8004440 <_printf_i+0x244>)
 800436c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004370:	6829      	ldr	r1, [r5, #0]
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	f851 6b04 	ldr.w	r6, [r1], #4
 8004378:	6029      	str	r1, [r5, #0]
 800437a:	061d      	lsls	r5, r3, #24
 800437c:	d514      	bpl.n	80043a8 <_printf_i+0x1ac>
 800437e:	07df      	lsls	r7, r3, #31
 8004380:	bf44      	itt	mi
 8004382:	f043 0320 	orrmi.w	r3, r3, #32
 8004386:	6023      	strmi	r3, [r4, #0]
 8004388:	b91e      	cbnz	r6, 8004392 <_printf_i+0x196>
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	f023 0320 	bic.w	r3, r3, #32
 8004390:	6023      	str	r3, [r4, #0]
 8004392:	2310      	movs	r3, #16
 8004394:	e7b0      	b.n	80042f8 <_printf_i+0xfc>
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	f043 0320 	orr.w	r3, r3, #32
 800439c:	6023      	str	r3, [r4, #0]
 800439e:	2378      	movs	r3, #120	; 0x78
 80043a0:	4828      	ldr	r0, [pc, #160]	; (8004444 <_printf_i+0x248>)
 80043a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043a6:	e7e3      	b.n	8004370 <_printf_i+0x174>
 80043a8:	0659      	lsls	r1, r3, #25
 80043aa:	bf48      	it	mi
 80043ac:	b2b6      	uxthmi	r6, r6
 80043ae:	e7e6      	b.n	800437e <_printf_i+0x182>
 80043b0:	4615      	mov	r5, r2
 80043b2:	e7bb      	b.n	800432c <_printf_i+0x130>
 80043b4:	682b      	ldr	r3, [r5, #0]
 80043b6:	6826      	ldr	r6, [r4, #0]
 80043b8:	6961      	ldr	r1, [r4, #20]
 80043ba:	1d18      	adds	r0, r3, #4
 80043bc:	6028      	str	r0, [r5, #0]
 80043be:	0635      	lsls	r5, r6, #24
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	d501      	bpl.n	80043c8 <_printf_i+0x1cc>
 80043c4:	6019      	str	r1, [r3, #0]
 80043c6:	e002      	b.n	80043ce <_printf_i+0x1d2>
 80043c8:	0670      	lsls	r0, r6, #25
 80043ca:	d5fb      	bpl.n	80043c4 <_printf_i+0x1c8>
 80043cc:	8019      	strh	r1, [r3, #0]
 80043ce:	2300      	movs	r3, #0
 80043d0:	6123      	str	r3, [r4, #16]
 80043d2:	4615      	mov	r5, r2
 80043d4:	e7ba      	b.n	800434c <_printf_i+0x150>
 80043d6:	682b      	ldr	r3, [r5, #0]
 80043d8:	1d1a      	adds	r2, r3, #4
 80043da:	602a      	str	r2, [r5, #0]
 80043dc:	681d      	ldr	r5, [r3, #0]
 80043de:	6862      	ldr	r2, [r4, #4]
 80043e0:	2100      	movs	r1, #0
 80043e2:	4628      	mov	r0, r5
 80043e4:	f7fb ff04 	bl	80001f0 <memchr>
 80043e8:	b108      	cbz	r0, 80043ee <_printf_i+0x1f2>
 80043ea:	1b40      	subs	r0, r0, r5
 80043ec:	6060      	str	r0, [r4, #4]
 80043ee:	6863      	ldr	r3, [r4, #4]
 80043f0:	6123      	str	r3, [r4, #16]
 80043f2:	2300      	movs	r3, #0
 80043f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043f8:	e7a8      	b.n	800434c <_printf_i+0x150>
 80043fa:	6923      	ldr	r3, [r4, #16]
 80043fc:	462a      	mov	r2, r5
 80043fe:	4649      	mov	r1, r9
 8004400:	4640      	mov	r0, r8
 8004402:	47d0      	blx	sl
 8004404:	3001      	adds	r0, #1
 8004406:	d0ab      	beq.n	8004360 <_printf_i+0x164>
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	079b      	lsls	r3, r3, #30
 800440c:	d413      	bmi.n	8004436 <_printf_i+0x23a>
 800440e:	68e0      	ldr	r0, [r4, #12]
 8004410:	9b03      	ldr	r3, [sp, #12]
 8004412:	4298      	cmp	r0, r3
 8004414:	bfb8      	it	lt
 8004416:	4618      	movlt	r0, r3
 8004418:	e7a4      	b.n	8004364 <_printf_i+0x168>
 800441a:	2301      	movs	r3, #1
 800441c:	4632      	mov	r2, r6
 800441e:	4649      	mov	r1, r9
 8004420:	4640      	mov	r0, r8
 8004422:	47d0      	blx	sl
 8004424:	3001      	adds	r0, #1
 8004426:	d09b      	beq.n	8004360 <_printf_i+0x164>
 8004428:	3501      	adds	r5, #1
 800442a:	68e3      	ldr	r3, [r4, #12]
 800442c:	9903      	ldr	r1, [sp, #12]
 800442e:	1a5b      	subs	r3, r3, r1
 8004430:	42ab      	cmp	r3, r5
 8004432:	dcf2      	bgt.n	800441a <_printf_i+0x21e>
 8004434:	e7eb      	b.n	800440e <_printf_i+0x212>
 8004436:	2500      	movs	r5, #0
 8004438:	f104 0619 	add.w	r6, r4, #25
 800443c:	e7f5      	b.n	800442a <_printf_i+0x22e>
 800443e:	bf00      	nop
 8004440:	0800475d 	.word	0x0800475d
 8004444:	0800476e 	.word	0x0800476e

08004448 <memcpy>:
 8004448:	440a      	add	r2, r1
 800444a:	4291      	cmp	r1, r2
 800444c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004450:	d100      	bne.n	8004454 <memcpy+0xc>
 8004452:	4770      	bx	lr
 8004454:	b510      	push	{r4, lr}
 8004456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800445a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800445e:	4291      	cmp	r1, r2
 8004460:	d1f9      	bne.n	8004456 <memcpy+0xe>
 8004462:	bd10      	pop	{r4, pc}

08004464 <memmove>:
 8004464:	4288      	cmp	r0, r1
 8004466:	b510      	push	{r4, lr}
 8004468:	eb01 0402 	add.w	r4, r1, r2
 800446c:	d902      	bls.n	8004474 <memmove+0x10>
 800446e:	4284      	cmp	r4, r0
 8004470:	4623      	mov	r3, r4
 8004472:	d807      	bhi.n	8004484 <memmove+0x20>
 8004474:	1e43      	subs	r3, r0, #1
 8004476:	42a1      	cmp	r1, r4
 8004478:	d008      	beq.n	800448c <memmove+0x28>
 800447a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800447e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004482:	e7f8      	b.n	8004476 <memmove+0x12>
 8004484:	4402      	add	r2, r0
 8004486:	4601      	mov	r1, r0
 8004488:	428a      	cmp	r2, r1
 800448a:	d100      	bne.n	800448e <memmove+0x2a>
 800448c:	bd10      	pop	{r4, pc}
 800448e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004496:	e7f7      	b.n	8004488 <memmove+0x24>

08004498 <_free_r>:
 8004498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800449a:	2900      	cmp	r1, #0
 800449c:	d044      	beq.n	8004528 <_free_r+0x90>
 800449e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044a2:	9001      	str	r0, [sp, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f1a1 0404 	sub.w	r4, r1, #4
 80044aa:	bfb8      	it	lt
 80044ac:	18e4      	addlt	r4, r4, r3
 80044ae:	f000 f913 	bl	80046d8 <__malloc_lock>
 80044b2:	4a1e      	ldr	r2, [pc, #120]	; (800452c <_free_r+0x94>)
 80044b4:	9801      	ldr	r0, [sp, #4]
 80044b6:	6813      	ldr	r3, [r2, #0]
 80044b8:	b933      	cbnz	r3, 80044c8 <_free_r+0x30>
 80044ba:	6063      	str	r3, [r4, #4]
 80044bc:	6014      	str	r4, [r2, #0]
 80044be:	b003      	add	sp, #12
 80044c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044c4:	f000 b90e 	b.w	80046e4 <__malloc_unlock>
 80044c8:	42a3      	cmp	r3, r4
 80044ca:	d908      	bls.n	80044de <_free_r+0x46>
 80044cc:	6825      	ldr	r5, [r4, #0]
 80044ce:	1961      	adds	r1, r4, r5
 80044d0:	428b      	cmp	r3, r1
 80044d2:	bf01      	itttt	eq
 80044d4:	6819      	ldreq	r1, [r3, #0]
 80044d6:	685b      	ldreq	r3, [r3, #4]
 80044d8:	1949      	addeq	r1, r1, r5
 80044da:	6021      	streq	r1, [r4, #0]
 80044dc:	e7ed      	b.n	80044ba <_free_r+0x22>
 80044de:	461a      	mov	r2, r3
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	b10b      	cbz	r3, 80044e8 <_free_r+0x50>
 80044e4:	42a3      	cmp	r3, r4
 80044e6:	d9fa      	bls.n	80044de <_free_r+0x46>
 80044e8:	6811      	ldr	r1, [r2, #0]
 80044ea:	1855      	adds	r5, r2, r1
 80044ec:	42a5      	cmp	r5, r4
 80044ee:	d10b      	bne.n	8004508 <_free_r+0x70>
 80044f0:	6824      	ldr	r4, [r4, #0]
 80044f2:	4421      	add	r1, r4
 80044f4:	1854      	adds	r4, r2, r1
 80044f6:	42a3      	cmp	r3, r4
 80044f8:	6011      	str	r1, [r2, #0]
 80044fa:	d1e0      	bne.n	80044be <_free_r+0x26>
 80044fc:	681c      	ldr	r4, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	6053      	str	r3, [r2, #4]
 8004502:	4421      	add	r1, r4
 8004504:	6011      	str	r1, [r2, #0]
 8004506:	e7da      	b.n	80044be <_free_r+0x26>
 8004508:	d902      	bls.n	8004510 <_free_r+0x78>
 800450a:	230c      	movs	r3, #12
 800450c:	6003      	str	r3, [r0, #0]
 800450e:	e7d6      	b.n	80044be <_free_r+0x26>
 8004510:	6825      	ldr	r5, [r4, #0]
 8004512:	1961      	adds	r1, r4, r5
 8004514:	428b      	cmp	r3, r1
 8004516:	bf04      	itt	eq
 8004518:	6819      	ldreq	r1, [r3, #0]
 800451a:	685b      	ldreq	r3, [r3, #4]
 800451c:	6063      	str	r3, [r4, #4]
 800451e:	bf04      	itt	eq
 8004520:	1949      	addeq	r1, r1, r5
 8004522:	6021      	streq	r1, [r4, #0]
 8004524:	6054      	str	r4, [r2, #4]
 8004526:	e7ca      	b.n	80044be <_free_r+0x26>
 8004528:	b003      	add	sp, #12
 800452a:	bd30      	pop	{r4, r5, pc}
 800452c:	20000204 	.word	0x20000204

08004530 <sbrk_aligned>:
 8004530:	b570      	push	{r4, r5, r6, lr}
 8004532:	4e0e      	ldr	r6, [pc, #56]	; (800456c <sbrk_aligned+0x3c>)
 8004534:	460c      	mov	r4, r1
 8004536:	6831      	ldr	r1, [r6, #0]
 8004538:	4605      	mov	r5, r0
 800453a:	b911      	cbnz	r1, 8004542 <sbrk_aligned+0x12>
 800453c:	f000 f8bc 	bl	80046b8 <_sbrk_r>
 8004540:	6030      	str	r0, [r6, #0]
 8004542:	4621      	mov	r1, r4
 8004544:	4628      	mov	r0, r5
 8004546:	f000 f8b7 	bl	80046b8 <_sbrk_r>
 800454a:	1c43      	adds	r3, r0, #1
 800454c:	d00a      	beq.n	8004564 <sbrk_aligned+0x34>
 800454e:	1cc4      	adds	r4, r0, #3
 8004550:	f024 0403 	bic.w	r4, r4, #3
 8004554:	42a0      	cmp	r0, r4
 8004556:	d007      	beq.n	8004568 <sbrk_aligned+0x38>
 8004558:	1a21      	subs	r1, r4, r0
 800455a:	4628      	mov	r0, r5
 800455c:	f000 f8ac 	bl	80046b8 <_sbrk_r>
 8004560:	3001      	adds	r0, #1
 8004562:	d101      	bne.n	8004568 <sbrk_aligned+0x38>
 8004564:	f04f 34ff 	mov.w	r4, #4294967295
 8004568:	4620      	mov	r0, r4
 800456a:	bd70      	pop	{r4, r5, r6, pc}
 800456c:	20000208 	.word	0x20000208

08004570 <_malloc_r>:
 8004570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004574:	1ccd      	adds	r5, r1, #3
 8004576:	f025 0503 	bic.w	r5, r5, #3
 800457a:	3508      	adds	r5, #8
 800457c:	2d0c      	cmp	r5, #12
 800457e:	bf38      	it	cc
 8004580:	250c      	movcc	r5, #12
 8004582:	2d00      	cmp	r5, #0
 8004584:	4607      	mov	r7, r0
 8004586:	db01      	blt.n	800458c <_malloc_r+0x1c>
 8004588:	42a9      	cmp	r1, r5
 800458a:	d905      	bls.n	8004598 <_malloc_r+0x28>
 800458c:	230c      	movs	r3, #12
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	2600      	movs	r6, #0
 8004592:	4630      	mov	r0, r6
 8004594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004598:	4e2e      	ldr	r6, [pc, #184]	; (8004654 <_malloc_r+0xe4>)
 800459a:	f000 f89d 	bl	80046d8 <__malloc_lock>
 800459e:	6833      	ldr	r3, [r6, #0]
 80045a0:	461c      	mov	r4, r3
 80045a2:	bb34      	cbnz	r4, 80045f2 <_malloc_r+0x82>
 80045a4:	4629      	mov	r1, r5
 80045a6:	4638      	mov	r0, r7
 80045a8:	f7ff ffc2 	bl	8004530 <sbrk_aligned>
 80045ac:	1c43      	adds	r3, r0, #1
 80045ae:	4604      	mov	r4, r0
 80045b0:	d14d      	bne.n	800464e <_malloc_r+0xde>
 80045b2:	6834      	ldr	r4, [r6, #0]
 80045b4:	4626      	mov	r6, r4
 80045b6:	2e00      	cmp	r6, #0
 80045b8:	d140      	bne.n	800463c <_malloc_r+0xcc>
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	4631      	mov	r1, r6
 80045be:	4638      	mov	r0, r7
 80045c0:	eb04 0803 	add.w	r8, r4, r3
 80045c4:	f000 f878 	bl	80046b8 <_sbrk_r>
 80045c8:	4580      	cmp	r8, r0
 80045ca:	d13a      	bne.n	8004642 <_malloc_r+0xd2>
 80045cc:	6821      	ldr	r1, [r4, #0]
 80045ce:	3503      	adds	r5, #3
 80045d0:	1a6d      	subs	r5, r5, r1
 80045d2:	f025 0503 	bic.w	r5, r5, #3
 80045d6:	3508      	adds	r5, #8
 80045d8:	2d0c      	cmp	r5, #12
 80045da:	bf38      	it	cc
 80045dc:	250c      	movcc	r5, #12
 80045de:	4629      	mov	r1, r5
 80045e0:	4638      	mov	r0, r7
 80045e2:	f7ff ffa5 	bl	8004530 <sbrk_aligned>
 80045e6:	3001      	adds	r0, #1
 80045e8:	d02b      	beq.n	8004642 <_malloc_r+0xd2>
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	442b      	add	r3, r5
 80045ee:	6023      	str	r3, [r4, #0]
 80045f0:	e00e      	b.n	8004610 <_malloc_r+0xa0>
 80045f2:	6822      	ldr	r2, [r4, #0]
 80045f4:	1b52      	subs	r2, r2, r5
 80045f6:	d41e      	bmi.n	8004636 <_malloc_r+0xc6>
 80045f8:	2a0b      	cmp	r2, #11
 80045fa:	d916      	bls.n	800462a <_malloc_r+0xba>
 80045fc:	1961      	adds	r1, r4, r5
 80045fe:	42a3      	cmp	r3, r4
 8004600:	6025      	str	r5, [r4, #0]
 8004602:	bf18      	it	ne
 8004604:	6059      	strne	r1, [r3, #4]
 8004606:	6863      	ldr	r3, [r4, #4]
 8004608:	bf08      	it	eq
 800460a:	6031      	streq	r1, [r6, #0]
 800460c:	5162      	str	r2, [r4, r5]
 800460e:	604b      	str	r3, [r1, #4]
 8004610:	4638      	mov	r0, r7
 8004612:	f104 060b 	add.w	r6, r4, #11
 8004616:	f000 f865 	bl	80046e4 <__malloc_unlock>
 800461a:	f026 0607 	bic.w	r6, r6, #7
 800461e:	1d23      	adds	r3, r4, #4
 8004620:	1af2      	subs	r2, r6, r3
 8004622:	d0b6      	beq.n	8004592 <_malloc_r+0x22>
 8004624:	1b9b      	subs	r3, r3, r6
 8004626:	50a3      	str	r3, [r4, r2]
 8004628:	e7b3      	b.n	8004592 <_malloc_r+0x22>
 800462a:	6862      	ldr	r2, [r4, #4]
 800462c:	42a3      	cmp	r3, r4
 800462e:	bf0c      	ite	eq
 8004630:	6032      	streq	r2, [r6, #0]
 8004632:	605a      	strne	r2, [r3, #4]
 8004634:	e7ec      	b.n	8004610 <_malloc_r+0xa0>
 8004636:	4623      	mov	r3, r4
 8004638:	6864      	ldr	r4, [r4, #4]
 800463a:	e7b2      	b.n	80045a2 <_malloc_r+0x32>
 800463c:	4634      	mov	r4, r6
 800463e:	6876      	ldr	r6, [r6, #4]
 8004640:	e7b9      	b.n	80045b6 <_malloc_r+0x46>
 8004642:	230c      	movs	r3, #12
 8004644:	603b      	str	r3, [r7, #0]
 8004646:	4638      	mov	r0, r7
 8004648:	f000 f84c 	bl	80046e4 <__malloc_unlock>
 800464c:	e7a1      	b.n	8004592 <_malloc_r+0x22>
 800464e:	6025      	str	r5, [r4, #0]
 8004650:	e7de      	b.n	8004610 <_malloc_r+0xa0>
 8004652:	bf00      	nop
 8004654:	20000204 	.word	0x20000204

08004658 <_realloc_r>:
 8004658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800465c:	4680      	mov	r8, r0
 800465e:	4614      	mov	r4, r2
 8004660:	460e      	mov	r6, r1
 8004662:	b921      	cbnz	r1, 800466e <_realloc_r+0x16>
 8004664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004668:	4611      	mov	r1, r2
 800466a:	f7ff bf81 	b.w	8004570 <_malloc_r>
 800466e:	b92a      	cbnz	r2, 800467c <_realloc_r+0x24>
 8004670:	f7ff ff12 	bl	8004498 <_free_r>
 8004674:	4625      	mov	r5, r4
 8004676:	4628      	mov	r0, r5
 8004678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800467c:	f000 f838 	bl	80046f0 <_malloc_usable_size_r>
 8004680:	4284      	cmp	r4, r0
 8004682:	4607      	mov	r7, r0
 8004684:	d802      	bhi.n	800468c <_realloc_r+0x34>
 8004686:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800468a:	d812      	bhi.n	80046b2 <_realloc_r+0x5a>
 800468c:	4621      	mov	r1, r4
 800468e:	4640      	mov	r0, r8
 8004690:	f7ff ff6e 	bl	8004570 <_malloc_r>
 8004694:	4605      	mov	r5, r0
 8004696:	2800      	cmp	r0, #0
 8004698:	d0ed      	beq.n	8004676 <_realloc_r+0x1e>
 800469a:	42bc      	cmp	r4, r7
 800469c:	4622      	mov	r2, r4
 800469e:	4631      	mov	r1, r6
 80046a0:	bf28      	it	cs
 80046a2:	463a      	movcs	r2, r7
 80046a4:	f7ff fed0 	bl	8004448 <memcpy>
 80046a8:	4631      	mov	r1, r6
 80046aa:	4640      	mov	r0, r8
 80046ac:	f7ff fef4 	bl	8004498 <_free_r>
 80046b0:	e7e1      	b.n	8004676 <_realloc_r+0x1e>
 80046b2:	4635      	mov	r5, r6
 80046b4:	e7df      	b.n	8004676 <_realloc_r+0x1e>
	...

080046b8 <_sbrk_r>:
 80046b8:	b538      	push	{r3, r4, r5, lr}
 80046ba:	4d06      	ldr	r5, [pc, #24]	; (80046d4 <_sbrk_r+0x1c>)
 80046bc:	2300      	movs	r3, #0
 80046be:	4604      	mov	r4, r0
 80046c0:	4608      	mov	r0, r1
 80046c2:	602b      	str	r3, [r5, #0]
 80046c4:	f7fd f854 	bl	8001770 <_sbrk>
 80046c8:	1c43      	adds	r3, r0, #1
 80046ca:	d102      	bne.n	80046d2 <_sbrk_r+0x1a>
 80046cc:	682b      	ldr	r3, [r5, #0]
 80046ce:	b103      	cbz	r3, 80046d2 <_sbrk_r+0x1a>
 80046d0:	6023      	str	r3, [r4, #0]
 80046d2:	bd38      	pop	{r3, r4, r5, pc}
 80046d4:	2000020c 	.word	0x2000020c

080046d8 <__malloc_lock>:
 80046d8:	4801      	ldr	r0, [pc, #4]	; (80046e0 <__malloc_lock+0x8>)
 80046da:	f000 b811 	b.w	8004700 <__retarget_lock_acquire_recursive>
 80046de:	bf00      	nop
 80046e0:	20000210 	.word	0x20000210

080046e4 <__malloc_unlock>:
 80046e4:	4801      	ldr	r0, [pc, #4]	; (80046ec <__malloc_unlock+0x8>)
 80046e6:	f000 b80c 	b.w	8004702 <__retarget_lock_release_recursive>
 80046ea:	bf00      	nop
 80046ec:	20000210 	.word	0x20000210

080046f0 <_malloc_usable_size_r>:
 80046f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046f4:	1f18      	subs	r0, r3, #4
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	bfbc      	itt	lt
 80046fa:	580b      	ldrlt	r3, [r1, r0]
 80046fc:	18c0      	addlt	r0, r0, r3
 80046fe:	4770      	bx	lr

08004700 <__retarget_lock_acquire_recursive>:
 8004700:	4770      	bx	lr

08004702 <__retarget_lock_release_recursive>:
 8004702:	4770      	bx	lr

08004704 <_init>:
 8004704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004706:	bf00      	nop
 8004708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470a:	bc08      	pop	{r3}
 800470c:	469e      	mov	lr, r3
 800470e:	4770      	bx	lr

08004710 <_fini>:
 8004710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004712:	bf00      	nop
 8004714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004716:	bc08      	pop	{r3}
 8004718:	469e      	mov	lr, r3
 800471a:	4770      	bx	lr
